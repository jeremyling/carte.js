var carte={};!function(t){var e=function(t,e,i,s){this.x=t,this.y=e,this.width=i,this.height=s,this.ulx=t,this.uly=e,this.lrx=t+i,this.lry=e+i};e.prototype.containsPoint=function(t,e){return this.ulx<=t&&t<=this.lrx&&this.uly<=e&&e<=this.lry},e.prototype.containsRect=function(t){return this.containsPoint(t.x,t.y)&&this.containsPoint(t.x+t.width,t.y+t.height)},e.prototype.containsDimensions=function(t,e){return this.width>=t&&this.height>=e},e.prototype.getNormalizedRect=function(t,i){var s=this.x/t,n=this.y/i,r=this.width/t,o=this.height/i;return new e(s,n,r,o)},window.Rectangle=e}(carte),function(){var t=function(t){this.rect=t,this.name="sprite0",this.image=null,this.child=[]};t.prototype.computeNormal=function(t,e){return this.maxWidth=t,this.maxHeight=e,this.normalRect=this.rect.getNormalizedRect(t,e),this},t.prototype.insert=function(e,i){var s=null;if(null!==this.image)return this.child.length>0?(s=this.child[0].insert(e,i),null!==s?s:this.child[1].insert(e,i)):null;if(this.rect.containsDimensions(i.width,i.height)){if(this.rect.width==i.width&&this.rect.height==i.height)return this.name=e,this.image=i,this;if(this.child.length>0)return s=this.child[0].insert(e,i),null!==s?s:this.child[1].insert(e,i);var n=this.rect,r=this.rect.width-i.width,o=this.rect.height-i.height;return r>o?(this.child[0]=new t(new Rectangle(n.x,n.y,i.width,n.height)),this.child[1]=new t(new Rectangle(n.x+i.width,n.y,r,n.height))):(this.child[0]=new t(new Rectangle(n.x,n.y,n.width,i.height)),this.child[1]=new t(new Rectangle(n.x,n.y+i.height,n.width,o))),this.child[0].computeNormal(this.maxWidth,this.maxHeight),this.child[1].computeNormal(this.maxWidth,this.maxHeight),this.child[0].insert(e,i)}return null},t.prototype.get=function(t){if(this.name==t)return this;if(this.child.length>0){var e=this.child[0].get(t);return null!==e?e:this.child[1].get(t)}return null},t.prototype["delete"]=function(t){var e=this.get(t);return e&&e.clear(),e},t.prototype.clear=function(){this.name="",this.image=null};var e=function(e,i){this.canvas=document.createElement("canvas"),this.canvas.width=e,this.canvas.height=i,this.context=this.canvas.getContext("2d"),this.texture=new THREE.Texture(this.canvas),this.texture.minFilter=THREE.NearestFilter,this.texture.magFilter=THREE.NearestFilter,this.texture.flipY=!1,this.pnode=new t(new Rectangle(0,0,e,i)),this.pnode.computeNormal(e,i)};e.prototype=new THREE.EventDispatcher,e.prototype.constructor=e,e.prototype.get=function(t){return this.pnode.get(t)},e.prototype.add=function(t,e){if(null!==this.get(t))return null;var i=this.pnode.insert(t,e);if(i){var s=i.rect;this.context.drawImage(e,s.x,s.y),this.texture.needsUpdate=!0,this.dispatchEvent({type:"sprite_added"})}return i},e.prototype.remove=function(t){var e=this.pnode["delete"](t);if(e){var i=e.rect;this.context.clearRect(i.x,i.y,i.width,i.height),this.texture.needsUpdate=!0,this.dispatchEvent({type:"sprite_removed"})}return e},e.prototype.load=function(t,e){},window.DynamicSpriteSheet=e}(),function(){var t=function(){};t.prototype.init=function(){return this},t.prototype.draw=function(){},t.prototype.update=function(){},t.prototype.create=function(t){},t.prototype.add=function(t){},t.prototype.remove=function(t){},t.prototype.destroy=function(t){},window.ObjectRenderer=t}(),function(){var t=function(){}.toString().match(/[^]*\/\*([^]*)\*\/\}$/)[1],e=function(){}.toString().match(/[^]*\/\*([^]*)\*\/\}$/)[1],i=Math.pow(2,32)-1,s=-99999,n=function(){};n.prototype=Object.create(THREE.EventDispatcher.prototype);var r=function(t){this.webGlView=t,this.pointSize=32,this.raycaster=new THREE.Raycaster,this.mouse=new THREE.Vector2,this.markers={},this.hoveredMarker=null,this.minIndex=i,this.maxIndex=0,this.index=0};r.prototype.init=function(){return this.positions=new Float32Array(3e6),this.positions.fill(s),this.positionsAttribute=new THREE.BufferAttribute(this.positions,3),this.positionsAttribute.setDynamic(!0),this.colors=new Float32Array(3e6),this.colorsAttribute=new THREE.BufferAttribute(this.colors,3),this.colorsAttribute.setDynamic(!0),this.tiles=new Float32Array(4e6),this.tilesAttribute=new THREE.BufferAttribute(this.tiles,4),this.tilesAttribute.setDynamic(!0),this.geometry=new THREE.BufferGeometry,this.geometry.addAttribute("position",this.positionsAttribute),this.geometry.addAttribute("color",this.colorsAttribute),this.geometry.addAttribute("tile",this.tilesAttribute),this.spriteSheet=new DynamicSpriteSheet(256,256),this.material=new THREE.ShaderMaterial({uniforms:{tex1:{type:"t",value:this.spriteSheet.texture},pointSize:{type:"f",value:this.pointSize}},vertexColors:THREE.VertexColors,vertexShader:t,fragmentShader:e,transparent:!0,depthWrite:!1,depthTest:!1}),this.sceneObject=new THREE.Points(this.geometry,this.material),this.raycastObjects=[this.sceneObject],this.addEventListeners(),this},r.prototype.addEventListeners=function(){document.addEventListener("mousemove",this.handleDocumentMouseMove.bind(this),!1),document.addEventListener("click",this.handleDocumentMouseClick.bind(this),!1)},r.prototype.handleDocumentMouseMove=function(t){this.update(t)},r.prototype.handleDocumentMouseClick=function(t){this.update(t),this.hoveredMarker&&this.hoveredMarker.dispatchEvent({type:"click"})},r.prototype._createMarker=function(t){var e=new n;return e.index=t,this.markers[t]=e,e},r.prototype.add=function(t){for(var e=3*this.index;e<this.positions.length&&this.positions[e]!==s;)e=3*++this.index;if(e>=this.positions.length)return void console.log("[PointRenderer] Run out of points!!!");t=t||{},t.position=t.position||{x:0,y:0,z:0},t.color=t.color||{r:1,g:1,b:1},this.positions[e+0]=t.position.x,this.positions[e+1]=t.position.y,this.positions[e+2]=t.position.z,this.colors[e+0]=t.color.r,this.colors[e+1]=t.color.g,this.colors[e+2]=t.color.b;var i=this.spriteSheet.get(t.imageName);i||(i=this.spriteSheet.add(t.imageName,t.image),i||console.log("[PointRenderer] SpriteSheet already full."));var n=null!==i?i.normalRect:{x:0,y:0,width:0,height:0};this.tiles[4*this.index+0]=n.x,this.tiles[4*this.index+1]=n.y,this.tiles[4*this.index+2]=n.width,this.tiles[4*this.index+3]=n.height,this.minIndex=Math.min(this.minIndex,this.index),this.maxIndex=Math.max(this.maxIndex,this.index);var r=this.markers[this.index]||this._createMarker(this.index);return this.index++,r},r.prototype.remove=function(t){var e=3*t.index;this.positions[e+0]=s,this.positions[e+1]=s,this.positions[e+2]=s,this.minIndex=Math.min(this.minIndex,t.index),this.maxIndex=Math.max(this.maxIndex,t.index),this.index>t.index&&(this.index=t.index)},r.prototype.draw=function(){this.minIndex=this.minIndex==i?0:this.minIndex;var t=this.maxIndex!=this.minIndex;this.positionsAttribute.updateRange.offset=3*this.minIndex,this.positionsAttribute.updateRange.count=3*this.maxIndex+3-3*this.minIndex,this.positionsAttribute.needsUpdate=t,this.colorsAttribute.updateRange.offset=3*this.minIndex,this.colorsAttribute.updateRange.count=3*this.maxIndex+3-3*this.minIndex,this.colorsAttribute.needsUpdate=t,this.tilesAttribute.updateRange.offset=4*this.minIndex,this.tilesAttribute.updateRange.count=4*this.maxIndex+4-4*this.minIndex,this.tilesAttribute.needsUpdate=t,t&&(this.geometry.computeBoundingBox(),this.geometry.computeBoundingSphere()),this.minIndex=i,this.maxIndex=0},r.prototype.update=function(t){this.mouse.x=t.clientX/this.webGlView.width*2-1,this.mouse.y=2*-(t.clientY/this.webGlView.height)+1,this.raycaster.params.Points.threshold=16/Math.pow(2,this.webGlView.scale),this.raycaster.setFromCamera(this.mouse,this.webGlView.camera);var e=this.raycaster.intersectObjects(this.raycastObjects);intersection=e.length>0?e[0]:null,intersection?null===this.hoveredMarker?(this.hoveredMarker=this.markers[intersection.index],this.hoveredMarker.dispatchEvent({type:"mouseover"})):this.hoveredMarker.index!=intersection.index&&(this.hoveredMarker.dispatchEvent({type:"mouseout"}),this.hoveredMarker=this.markers[intersection.index],this.hoveredMarker.dispatchEvent({type:"mouseover"})):null!==this.hoveredMarker&&(this.hoveredMarker.dispatchEvent({type:"mouseout"}),this.hoveredMarker=null)},window.PointRenderer=r}(),function(){var t=function(){};t.prototype=new ObjectRenderer,t.prototype.constructor=ObjectRenderer,t.prototype.create=function(t){t=t||{};var e=t.features||[],i=null!==t.fillColor&&void 0!==t.fillColor?t.fillColor:255,s=null!==t.strokeColor&&void 0!==t.strokeColor?t.strokeColor:16777215;if(null===e||0===e.length)return null;for(var n=new THREE.Geometry,r=new THREE.Geometry,o=n.vertices.length,h=0,a=0;a<e.length;a++){var d=e[a];if(0!==d.length)for(var l=0;l<d.length;l++)for(var p=d[l],u=0;u<p.length;u++){for(var c=p[u],m=[],y=[],f=0,g=0;g<c.length;g++){var v=c[g],x={x:v[0],y:v[1]};m.push(x.x),m.push(x.y);var w=new THREE.Vector3(x.x,x.y,1001);n.vertices.push(w);var E=new THREE.Vector3(x.x,x.y,1);r.vertices.push(E);var b,R,T;g==c.length-1?(b=c[0],R={x:b[0],y:b[1]},T=new THREE.Vector3(R.x,R.y,1),r.vertices.push(T)):(b=c[g+1],R={x:b[0],y:b[1]},T=new THREE.Vector3(R.x,R.y,1),r.vertices.push(T))}u>0&&y.push(f),f+=c.length;for(var M=earcut(m,null,2),S=0;S<M.length;S+=3){var A=new THREE.Face3(M[S+2]+o,M[S+1]+o,M[S+0]+o);n.faces.push(A)}o=n.vertices.length,h++}}var I=new THREE.Mesh(n,new THREE.MeshBasicMaterial({color:i,opacity:.25,transparent:!0,depthWrite:!1,depthTest:!1})),k=new THREE.LineSegments(r,new THREE.LineBasicMaterial({color:s,linewidth:2,opacity:.25,transparent:!0,depthWrite:!1,depthTest:!1}));return{shape:I,outline:k}},window.PolygonRenderer=t}(),function(){var t=function(){}.toString().match(/[^]*\/\*([^]*)\*\/\}$/)[1],e=function(){}.toString().match(/[^]*\/\*([^]*)\*\/\}$/)[1],i=Math.pow(2,32)-1,s=-99999,n=12,r=6,o=8,h=16,a=function(){this.minIndex=i,this.maxIndex=0,this.index=0,this.sprites=[],this.opacity=.8};a.prototype.init=function(){return this.positions=new Float32Array(1024*n),this.positions.fill(s),this.positionsAttribute=new THREE.BufferAttribute(this.positions,3),this.positionsAttribute.setDynamic(!0),this.indices=new Uint16Array(1024*r),this.indicesAttribute=new THREE.BufferAttribute(this.indices,1),this.indicesAttribute.setDynamic(!0),this.uv=new Float32Array(1024*o),this.uvAttribute=new THREE.BufferAttribute(this.uv,2),this.uvAttribute.setDynamic(!0),this.tiles=new Float32Array(1024*h),this.tilesAttribute=new THREE.BufferAttribute(this.tiles,4),this.tilesAttribute.setDynamic(!0),this.geometry=new THREE.BufferGeometry,this.geometry.setIndex(this.indicesAttribute),this.geometry.addAttribute("position",this.positionsAttribute),this.geometry.addAttribute("uv",this.uvAttribute),this.geometry.addAttribute("tile",this.tilesAttribute),this.spriteSheet=new DynamicSpriteSheet(4096,4096),this.material=new THREE.ShaderMaterial({uniforms:{tex1:{type:"t",value:this.spriteSheet.texture},alpha:{type:"f",value:this.opacity}},vertexShader:t,fragmentShader:e}),this.sceneObject=new THREE.Mesh(this.geometry,this.material),this},a.prototype.add=function(t){for(var e=this.index*n;e<this.positions.length&&this.positions[e]!==s;)e=++this.index*n;if(e>=this.positions.length)return void console.log("[SpriteRenderer] Run out of points!!!");var i=t.image,a=t.imageName,d=this.spriteSheet.get(a);d||(d=this.spriteSheet.add(a,i),d||console.log("[SpriteRenderer] SpriteSheet already full.")),t=t||{},t.position=t.position||{x:0,y:0,z:0},t.width=t.width||256,t.height=t.height||256,t.imageName=t.icon||"red-dot",this.positions[e+0]=t.position.x,this.positions[e+1]=t.position.y,this.positions[e+2]=t.position.z,this.positions[e+3]=t.position.x+t.width,this.positions[e+4]=t.position.y,this.positions[e+5]=t.position.z,this.positions[e+6]=t.position.x,this.positions[e+7]=t.position.y+t.height,this.positions[e+8]=t.position.z,this.positions[e+9]=t.position.x+t.width,this.positions[e+10]=t.position.y+t.height,this.positions[e+11]=t.position.z;var l=this.index*r;this.indices[l+0]=4*this.index+0,this.indices[l+1]=4*this.index+2,this.indices[l+2]=4*this.index+1,this.indices[l+3]=4*this.index+1,this.indices[l+4]=4*this.index+2,this.indices[l+5]=4*this.index+3;var p=this.index*o;this.uv[p+0]=0,this.uv[p+1]=0,this.uv[p+2]=1,this.uv[p+3]=0,this.uv[p+4]=0,this.uv[p+5]=1,this.uv[p+6]=1,this.uv[p+7]=1;var u=this.index*h;return this.tiles[u+0]=this.tiles[u+4]=this.tiles[u+8]=this.tiles[u+12]=d.normalRect.x,this.tiles[u+1]=this.tiles[u+5]=this.tiles[u+9]=this.tiles[u+13]=d.normalRect.y,this.tiles[u+2]=this.tiles[u+6]=this.tiles[u+10]=this.tiles[u+14]=d.normalRect.width,this.tiles[u+3]=this.tiles[u+7]=this.tiles[u+11]=this.tiles[u+15]=d.normalRect.height,this.minIndex=Math.min(this.minIndex,this.index),this.maxIndex=Math.max(this.maxIndex,this.index),{index:this.index++,name:a}},a.prototype.remove=function(t){for(var e=t.index*n,i=0;n>i;i++)this.positions[e+i]=s;this.spriteSheet.remove(t.name),this.minIndex=Math.min(this.minIndex,t.index),this.maxIndex=Math.max(this.maxIndex,t.index),this.index>t.index&&(this.index=t.index)},a.prototype.draw=function(){this.minIndex=this.minIndex==i?0:this.minIndex;var t=this.maxIndex!=this.minIndex,e=n;this.positionsAttribute.updateRange.offset=this.minIndex*e,this.positionsAttribute.updateRange.count=this.maxIndex*e+e-this.minIndex*e,this.positionsAttribute.needsUpdate=t;var s=r;this.indicesAttribute.updateRange.offset=this.minIndex*s,this.indicesAttribute.updateRange.count=this.maxIndex*s+s-this.minIndex*s,this.indicesAttribute.needsUpdate=t;var a=o;this.uvAttribute.updateRange.offset=this.minIndex*a,this.uvAttribute.updateRange.count=this.maxIndex*a+a-this.minIndex*a,this.uvAttribute.needsUpdate=t;var d=h;this.tilesAttribute.updateRange.offset=this.minIndex*d,this.tilesAttribute.updateRange.count=this.maxIndex*d+d-this.minIndex*d,this.tilesAttribute.needsUpdate=t,t&&(this.geometry.computeBoundingBox(),this.geometry.computeBoundingSphere()),this.minIndex=i,this.maxIndex=0},window.SpriteRenderer=a}(),function(){var t=function(t){this.name=t.name;var e=t.x,i=t.y,s=t.width,n=t.height;this.rect=new Rectangle(e,i,s,n)};t.prototype.computeNormal=function(t,e){return this.normalRect=this.rect.getNormalizedRect(t,e),this};var e=function(e,i){this.texture=e,this.sprites={};for(var s=0;s<i.length;s++)this.sprites[i[s].name]=new t(i[s]).computeNormal(e.image.width,e.image.height)};e.prototype.get=function(t){return this.sprites[t]},window.SpriteSheet=e}(),function(){var t=function(){for(var t=document.createElement("div"),e=["transform","WebkitTransform","MozTransform","OTransform","msTransform"],i=0;i<e.length;i++){var s=e[i];if(void 0!==t.style[s])return s}return e[0]}(),e=function(){this.camera=new THREE.OrthographicCamera(0,255,0,255,-3e3,3e3),this.camera.position.z=1e3,this.scene=new THREE.Scene,this.sceneMask=new THREE.Scene,this.renderer=new THREE.WebGLRenderer({alpha:!0,antialiasing:!0,clearColor:0,clearAlpha:0}),this.renderer.setPixelRatio(window.devicePixelRatio),this.renderer.autoClear=!1,this.context=this.renderer.context,this.animationFrame=null,this.objectRenderers=[],this.numMasks=0,this.update=function(){var e=this.map,i=e.getBounds(),s=new google.maps.LatLng(i.getNorthEast().lat(),i.getSouthWest().lng()),n=this.renderer.domElement,r=this.getProjection().fromLatLngToDivPixel(s);n.style[t]="translate("+Math.round(r.x)+"px,"+Math.round(r.y)+"px)";var o=e.getDiv(),h=o.clientWidth,a=o.clientHeight;(h!==this.width||a!==this.height)&&(this.width=h,this.height=a,this.renderer.setSize(h,a));var d=e.getZoom(),l=Math.pow(2,d),p=e.getProjection().fromLatLngToPoint(s);this.camera.position.x=p.x,this.camera.position.y=p.y,this.scale=d,this.camera.scale.x=this.width/256/l,this.camera.scale.y=this.height/256/l},this.draw=function(){cancelAnimationFrame(this.animationFrame),this.animationFrame=requestAnimationFrame(this.deferredRender.bind(this))},this.deferredRender=function(){this.update();var t=this.context,e=(this.renderer,this.numMasks>0);e&&(t.colorMask(!1,!1,!1,!1),t.depthMask(!1),t.enable(t.STENCIL_TEST),t.stencilOp(t.REPLACE,t.REPLACE,t.REPLACE),t.stencilFunc(t.ALWAYS,0,4294967295),t.clearStencil(1),this.renderer.render(this.sceneMask,this.camera,null,!0),t.colorMask(!0,!0,!0,!0),t.depthMask(!0),t.stencilFunc(t.EQUAL,0,4294967295),t.stencilOp(t.KEEP,t.KEEP,t.KEEP));for(var i=0;i<this.objectRenderers.length;i++)this.objectRenderers[i].draw();this.renderer.render(this.scene,this.camera),e&&t.disable(t.STENCIL_TEST),this.dispatchEvent({type:"render"})}};e.prototype=_.extend(new google.maps.OverlayView,new THREE.EventDispatcher),e.prototype.constructor=e,e.prototype.onAdd=function(){this.getPanes().overlayLayer.appendChild(this.renderer.domElement),this.addEventListeners(),this.dispatchEvent({type:"added_to_dom"})},e.prototype.onRemove=function(){this.renderer.domElement;this.canvas.parentElement.removeChild(this.canvas),this.removeEventListeners(),this.dispatchEvent({type:"removed_from_dom"})},e.prototype.init=function(){return this.pointRenderer=new PointRenderer(this).init(),this.scene.add(this.pointRenderer.sceneObject),this.spriteRenderer=(new SpriteRenderer).init(),this.scene.add(this.spriteRenderer.sceneObject),this.polygonRenderer=(new PolygonRenderer).init(),this.objectRenderers.push(this.pointRenderer),this.objectRenderers.push(this.polygonRenderer),this.objectRenderers.push(this.spriteRenderer),this},e.prototype.addEventListeners=function(){this.changeHandler=google.maps.event.addListener(this.map,"bounds_changed",this.draw.bind(this))},e.prototype.removeEventListeners=function(){google.maps.event.removeListener(this.changeHandler),this.changeHandler=null},e.prototype.addObject=function(t){this.scene.add(t)},e.prototype.removeObject=function(t){this.scene.remove(t)},e.prototype.addPoint=function(t){return this.pointRenderer.add(t)},e.prototype.removePoint=function(t){this.pointRenderer.remove(t)},e.prototype.addSprite=function(t){return this.spriteRenderer.add(t)},e.prototype.removeSprite=function(t){this.spriteRenderer.remove(t)},e.prototype.createGeometry=function(t){var e=this.polygonRenderer.create(t,this.scene);return this.addGeometry(e),e},e.prototype.addGeometry=function(t){this.scene.add(t.shape),this.scene.add(t.outline)},e.prototype.removeGeometry=function(t){this.scene.remove(t.shape),this.scene.remove(t.outline)},e.prototype.destroyGeometry=function(t){delete t.shape,delete t.outline},e.prototype.createMask=function(t){var e=this.polygonRenderer.create(t);return this.addMask(e),this.numMasks++,e},e.prototype.addMask=function(t){this.sceneMask.add(t.shape),this.sceneMask.add(t.outline),this.numMasks++},e.prototype.removeMask=function(t){this.sceneMask.remove(t.shape),this.sceneMask.remove(t.outline),this.numMasks--},e.prototype.destroyMask=function(t){delete t.shape,delete t.outline},window.WebGLView=e}(),function(){var t={};t.get=function(t,e){var i=Q.defer(),s=e.responseType;if("blob"===s)var n=$("<img />").attr("src",t).on("load",function(){i.resolve({data:n[0]})});else $.ajax(t,e).success(function(t,e,s){i.resolve({data:t,status:e,xhr:s})}).error(function(t,e,s){i.reject({xhr:t,status:e,error:s})});return i.promise},window.http=t}(),function(){function t(t,i,s){var n=s.fromLatLngToPoint(t),r={x:n.x*Math.pow(2,i),y:n.y*Math.pow(2,i)},o={x:Math.floor(r.x/e),y:Math.floor(r.y/e)};return o}var e=256,i=function(t){this.webGlView=t,this.bounds=new Rectangle(0,0,0,0),this.zoom=0,this.minZoom=0,this.maxZoom=10,this.enabled=!1,this.views=[]};i.prototype.setMap=function(t){return t?(this.map=t,this.update(),this._addEventListeners()):(this._removeEventListeners(),this.map=t),this},i.prototype.addView=function(t){var i=this.views.indexOf(t);0>i&&this.views.push(t);var s=this.bounds;return t.setTileSize(e),t.showTiles(s.ulx,s.uly,s.lrx,s.lry,this.zoom),this},i.prototype.removeView=function(t){var e=this.views.indexOf(t);return e>=0&&this.views.splice(e,1),t.clear(),this},i.prototype._addEventListeners=function(){this.changeListener=google.maps.event.addListener(this.map,"bounds_changed",this.update.bind(this))},i.prototype._removeEventListeners=function(){google.maps.event.removeListener(this.changeListener)},i.prototype.hasChangedZoom=function(t){return this.zoom!=t},i.prototype.hasChangedBounds=function(t){var e=this.bounds;return e.ulx!=t.ulx||e.uly!=t.uly||e.lrx!=t.lrx||e.lry!=t.lry},i.prototype.update=function(){var e=this.map,i=e.getBounds(),s=i.getNorthEast(),n=i.getSouthWest(),r=new google.maps.LatLng(s.lat(),n.lng()),o=new google.maps.LatLng(n.lat(),s.lng()),h=e.getZoom(),a=e.getProjection(),d=t(r,h,a),l=t(o,h,a),p=new Rectangle(d.x,d.y,l.x-d.x,l.y-d.y);h=Math.max(this.minZoom,h),h=Math.min(this.maxZoom,h);var u=this.bounds,c=Math.min(u.ulx,p.ulx),m=Math.min(u.uly,p.uly),y=Math.max(u.lrx,p.lrx)-c,f=Math.max(u.lry,p.lry)-m,g=new Rectangle(c,m,y,f);this.hasChangedZoom(h)&&(this.updateTiles(u,u,new Rectangle(-1,-1,0,0),this.zoom),u=new Rectangle(-1,-1,0,0),g=p),this.hasChangedBounds(p)&&this.updateTiles(g,u,p,h)},i.prototype.updateTiles=function(t,e,i,s){for(var n=this.views,r=0;r<n.length;r++){for(var o=t.ulx;o<=t.lrx;o++)for(var h=t.uly;h<=t.lry;h++)i.containsPoint(o,h)?e.containsPoint(o,h)||n[r].showTile(o,h,s):e.containsPoint(o,h)&&n[r].hideTile(o,h,s);this.webGlView.draw()}this.zoom=s,this.bounds=i},window.TileController=i}(),function(){var t=function(t,e){this.url=t,this.projection=e,this.fileExtension="json",this.responseType="json"};t.prototype.parse=function(t){var e=[];if(t)if("FeatureCollection"==t.type)for(var i=t.features,s=0;s<i.length;s++)e.push(this._parseFeature(i[s]));else"Feature"==t.type&&e.push(this._parseFeature(t));return e},t.prototype._parseFeature=function(t){var e=[];if("Polygon"==t.geometry.type)e.push(this._parsePolygon(t.geometry.coordinates));else if("MultiPolygon"==t.geometry.type)for(var i=t.geometry.coordinates,s=0;s<i.length;s++)e.push(this._parsePolygon(i[s]));return e},t.prototype._parsePolygon=function(t){for(var e=[],i=0;i<t.length;i++){for(var s=[],n=0;n<t[i].length;n++){var r=new google.maps.LatLng(t[i][n][1],t[i][n][0]),o=this.projection.fromLatLngToPoint(r);s.push([o.x,o.y])}e.push(s)}return e},window.GeoJSONDataSource=t}(),function(){var t=function(t){this.url=t,this.fileExtension="png",this.responseType="blob"};t.prototype.parse=function(t){return t},window.ImageDataSource=t}(),function(){var t=function(t,e,i){this.dataSource=t,this.$http=e,this.$q=i,this.tiles={}};t.prototype.getTileUrl=function(t,e,i){return this.dataSource.url+"/"+i+"/"+t+"/"+e+"."+this.dataSource.fileExtension},t.prototype.getTile=function(t,e,i){var s=this.$q.defer(),n=this.getTileUrl(t,e,i);if(this.tiles[n])s.resolve({url:n,data:this.tiles[n]});else{var r=this;this.$http.get(n,{responseType:this.dataSource.responseType}).then(function(t){r.tiles[n]=r.dataSource.parse(t.data),s.resolve({url:n,data:r.tiles[n]})},function(t){s.reject(t)})}return s.promise},window.TileProvider=t}(),function(){var t=function(t,e){this.tileProvider=t,this.webGlView=e,this.tiles={}};t.prototype.setTileSize=function(t){this.tileSize=t},t.prototype.showTiles=function(t,e,i,s,n){for(var r=t;i>=r;r++)for(var o=e;s>=o;o++)this.showTile(r,o,n);this.webGlView.draw()},t.prototype.showTile=function(t,e,i){var s=this.tileProvider.getTileUrl(t,e,i);if(this.tiles[s]){if(!this.tiles[s].geometry){var n=Math.pow(2,i),r=this.tileSize/n,o={position:{x:t*r,y:e*r,z:i},width:r,height:r,image:this.tiles[s].data,imageName:s};this.tiles[s].geometry=this.webGlView.addSprite(o),this.webGlView.draw()}}else{var h=this;this.tileProvider.getTile(t,e,i).then(function(n){h.tiles[s]=n;var r=Math.pow(2,i),o=h.tileSize/r,a={position:{x:t*o,y:e*o,z:i},width:o,height:o,image:h.tiles[s].data,imageName:s};h.tiles[s].geometry=h.webGlView.addSprite(a),h.webGlView.draw()},function(t){})}},t.prototype.hideTile=function(t,e,i){var s=this.tileProvider.getTileUrl(t,e,i);this.tiles[s]&&this.tiles[s].geometry&&(this.webGlView.removeSprite(this.tiles[s].geometry),this.tiles[s].geometry=null)},t.prototype.clear=function(){for(var t in this.tiles)this.tiles[t].geometry&&(this.webGlView.removeSprite(this.tiles[t].geometry),this.tiles[t].geometry=null);this.webGlView.draw()},window.ImageTileView=t}(),function(){function t(){return(255&Math.floor(255*Math.random()))<<16|(255&Math.floor(255*Math.random()))<<8|255&Math.floor(255*Math.random())}var e=function(t,e,i){this.tileProvider=t,this.webGlView=e,this.tiles={},this.shownTiles={},this.useRandomColors=i};e.prototype.setTileSize=function(t){this.tileSize=t},e.prototype.setTileSize=function(t){this.tileSize=t},e.prototype.showTiles=function(t,e,i,s,n){for(var r=t;i>=r;r++)for(var o=e;s>=o;o++)this.showTile(r,o,n);this.webGlView.draw()},e.prototype.showTile=function(e,i,s){var n=this.tileProvider.getTileUrl(e,i,s);if(!this.shownTiles[n])if(this.shownTiles[n]=!0,this.tiles[n]){if(this.tiles[n].geometry)this.webGlView.addGeometry(this.tiles[n].geometry);else if(this.tiles[n].data){var r={};r.features=this.tiles[n].data,r.fillColor=this.useRandomColors?t():null,this.tiles[n].geometry=this.webGlView.createGeometry(r),this.webGlView.draw()}}else{var o=this;this.tileProvider.getTile(e,i,s).then(function(e){if(o.tiles[n]=e,o.shownTiles[n]){var i={};i.features=o.tiles[n].data,i.fillColor=o.useRandomColors?t():null,o.tiles[n].geometry=o.webGlView.createGeometry(i),o.webGlView.draw()}},function(t){})}},e.prototype.hideTile=function(t,e,i){var s=this.tileProvider.getTileUrl(t,e,i);this.shownTiles[s]=!1,this.tiles[s]&&this.tiles[s].geometry&&(this.webGlView.removeGeometry(this.tiles[s].geometry),delete this.tiles[s].geometry,this.tiles[s].geometry=null)},e.prototype.clear=function(){for(var t in this.tiles)this.tiles[t].geometry&&this.webGlView.removeGeometry(this.tiles[t].geometry);this.webGlView.draw()},window.VectorTileView=e}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiLCJnZW9tcy9yZWN0YW5nbGUuanMiLCJncmFwaGljcy9keW5hbWljX3Nwcml0ZXNoZWV0LmpzIiwiZ3JhcGhpY3Mvb2JqZWN0X3JlbmRlcmVyLmpzIiwiZ3JhcGhpY3MvcG9pbnRfcmVuZGVyZXIuanMiLCJncmFwaGljcy9wb2x5Z29uX3JlbmRlcmVyLmpzIiwiZ3JhcGhpY3Mvc3ByaXRlX3JlbmRlcmVyLmpzIiwiZ3JhcGhpY3Mvc3ByaXRlc2hlZXQuanMiLCJncmFwaGljcy93ZWJnbF92aWV3LmpzIiwidXRpbHMvaHR0cHJlcXVlc3RzLmpzIiwiZ2lzL2NvbnRyb2xsZXJzL3RpbGVfY29udHJvbGxlci5qcyIsImdpcy9kYXRhc291cmNlcy9nZW9qc29uX2RhdGFzb3VyY2UuanMiLCJnaXMvZGF0YXNvdXJjZXMvaW1hZ2VfZGF0YXNvdXJjZS5qcyIsImdpcy9kYXRhc291cmNlcy90aWxlX3Byb3ZpZGVyLmpzIiwiZ2lzL3ZpZXdzL2ltYWdlX3RpbGVfdmlldy5qcyIsImdpcy92aWV3cy92ZWN0b3JfdGlsZV92aWV3LmpzIl0sIm5hbWVzIjpbImNhcnRlIiwicGtnIiwiUmVjdGFuZ2xlIiwieCIsInkiLCJ3aWR0aCIsImhlaWdodCIsInRoaXMiLCJ1bHgiLCJ1bHkiLCJscngiLCJscnkiLCJwcm90b3R5cGUiLCJjb250YWluc1BvaW50IiwiY29udGFpbnNSZWN0IiwicmVjdCIsImNvbnRhaW5zRGltZW5zaW9ucyIsImdldE5vcm1hbGl6ZWRSZWN0IiwibWF4V2lkdGgiLCJtYXhIZWlnaHQiLCJ3aW5kb3ciLCJTcHJpdGVOb2RlIiwibmFtZSIsImltYWdlIiwiY2hpbGQiLCJjb21wdXRlTm9ybWFsIiwibm9ybWFsUmVjdCIsImluc2VydCIsIm5ld05vZGUiLCJsZW5ndGgiLCJkVyIsImRIIiwiZ2V0Iiwibm9kZSIsImNsZWFyIiwiRHluYW1pY1Nwcml0ZVNoZWV0IiwiY2FudmFzIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY29udGV4dCIsImdldENvbnRleHQiLCJ0ZXh0dXJlIiwiVEhSRUUiLCJUZXh0dXJlIiwibWluRmlsdGVyIiwiTmVhcmVzdEZpbHRlciIsIm1hZ0ZpbHRlciIsImZsaXBZIiwicG5vZGUiLCJFdmVudERpc3BhdGNoZXIiLCJjb25zdHJ1Y3RvciIsImFkZCIsImRyYXdJbWFnZSIsIm5lZWRzVXBkYXRlIiwiZGlzcGF0Y2hFdmVudCIsInR5cGUiLCJyZW1vdmUiLCJjbGVhclJlY3QiLCJsb2FkIiwidXJsIiwiT2JqZWN0UmVuZGVyZXIiLCJpbml0IiwiZHJhdyIsInVwZGF0ZSIsImNyZWF0ZSIsIm9wdGlvbnMiLCJvYmplY3QiLCJkZXN0cm95IiwidnNoYWRlciIsInRvU3RyaW5nIiwibWF0Y2giLCJmc2hhZGVyIiwiTUFYX0NPVU5UIiwiTWF0aCIsInBvdyIsIlNUQVJUX1ZBTFVFIiwiTWFya2VyIiwiT2JqZWN0IiwiUG9pbnRSZW5kZXJlciIsIndlYkdsVmlldyIsInBvaW50U2l6ZSIsInJheWNhc3RlciIsIlJheWNhc3RlciIsIm1vdXNlIiwiVmVjdG9yMiIsIm1hcmtlcnMiLCJob3ZlcmVkTWFya2VyIiwibWluSW5kZXgiLCJtYXhJbmRleCIsImluZGV4IiwicG9zaXRpb25zIiwiRmxvYXQzMkFycmF5IiwiZmlsbCIsInBvc2l0aW9uc0F0dHJpYnV0ZSIsIkJ1ZmZlckF0dHJpYnV0ZSIsInNldER5bmFtaWMiLCJjb2xvcnMiLCJjb2xvcnNBdHRyaWJ1dGUiLCJ0aWxlcyIsInRpbGVzQXR0cmlidXRlIiwiZ2VvbWV0cnkiLCJCdWZmZXJHZW9tZXRyeSIsImFkZEF0dHJpYnV0ZSIsInNwcml0ZVNoZWV0IiwibWF0ZXJpYWwiLCJTaGFkZXJNYXRlcmlhbCIsInVuaWZvcm1zIiwidGV4MSIsInZhbHVlIiwidmVydGV4Q29sb3JzIiwiVmVydGV4Q29sb3JzIiwidmVydGV4U2hhZGVyIiwiZnJhZ21lbnRTaGFkZXIiLCJ0cmFuc3BhcmVudCIsImRlcHRoV3JpdGUiLCJkZXB0aFRlc3QiLCJzY2VuZU9iamVjdCIsIlBvaW50cyIsInJheWNhc3RPYmplY3RzIiwiYWRkRXZlbnRMaXN0ZW5lcnMiLCJhZGRFdmVudExpc3RlbmVyIiwiaGFuZGxlRG9jdW1lbnRNb3VzZU1vdmUiLCJiaW5kIiwiaGFuZGxlRG9jdW1lbnRNb3VzZUNsaWNrIiwiZXZlbnQiLCJfY3JlYXRlTWFya2VyIiwibWFya2VyIiwiYXJyYXlJbmRleCIsImNvbnNvbGUiLCJsb2ciLCJwb3NpdGlvbiIsInoiLCJjb2xvciIsInIiLCJnIiwiYiIsInNwcml0ZSIsImltYWdlTmFtZSIsInNwcml0ZVJlY3QiLCJtaW4iLCJtYXgiLCJ1cGRhdGVSYW5nZSIsIm9mZnNldCIsImNvdW50IiwiY29tcHV0ZUJvdW5kaW5nQm94IiwiY29tcHV0ZUJvdW5kaW5nU3BoZXJlIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYXJhbXMiLCJ0aHJlc2hvbGQiLCJzY2FsZSIsInNldEZyb21DYW1lcmEiLCJjYW1lcmEiLCJpbnRlcnNlY3Rpb25zIiwiaW50ZXJzZWN0T2JqZWN0cyIsImludGVyc2VjdGlvbiIsIlBvbHlnb25SZW5kZXJlciIsImZlYXR1cmVzIiwiZmlsbENvbG9yIiwidW5kZWZpbmVkIiwic3Ryb2tlQ29sb3IiLCJHZW9tZXRyeSIsIm91dGxpbmUiLCJ2ZXJ0ZXhPZmZzZXQiLCJ2ZXJ0aWNlcyIsIm51bVBvbHlnb25zIiwiaSIsImZlYXR1cmUiLCJqIiwicG9seWdvbiIsInAiLCJsb29wIiwicG9pbnRzIiwiaG9sZUluZGljZXMiLCJob2xlSW5kZXgiLCJsIiwiY29vcmRpbmF0ZSIsInBvaW50IiwicHVzaCIsInZlcnRleCIsIlZlY3RvcjMiLCJ2ZXJ0ZXgxIiwiY29vcmQwIiwicG9pbnQwIiwidmVydGV4MCIsInRyaXMiLCJlYXJjdXQiLCJrIiwiZmFjZSIsIkZhY2UzIiwiZmFjZXMiLCJjb3ZlcmFnZVBvbHlnb24iLCJNZXNoIiwiTWVzaEJhc2ljTWF0ZXJpYWwiLCJvcGFjaXR5Iiwib3V0bGluZVBvbHlnb24iLCJMaW5lU2VnbWVudHMiLCJMaW5lQmFzaWNNYXRlcmlhbCIsImxpbmV3aWR0aCIsInNoYXBlIiwiUE9TSVRJT05fSU5URVJWQUwiLCJJTkRFWF9JTlRFUlZBTCIsIlVWX0lOVEVSVkFMIiwiVElMRV9JTlRFUlZBTCIsIlNwcml0ZVJlbmRlcmVyIiwic3ByaXRlcyIsImluZGljZXMiLCJVaW50MTZBcnJheSIsImluZGljZXNBdHRyaWJ1dGUiLCJ1diIsInV2QXR0cmlidXRlIiwic2V0SW5kZXgiLCJhbHBoYSIsInBvc2l0aW9uSW5kZXgiLCJpY29uIiwidXZJbmRleCIsInQiLCJ1IiwiU3ByaXRlIiwiZGF0YSIsIlNwcml0ZVNoZWV0Iiwic3ByaXRlTmFtZSIsIkNTU19UUkFOU0ZPUk0iLCJkaXYiLCJwcm9wcyIsInByb3AiLCJzdHlsZSIsIldlYkdMVmlldyIsIk9ydGhvZ3JhcGhpY0NhbWVyYSIsInNjZW5lIiwiU2NlbmUiLCJzY2VuZU1hc2siLCJyZW5kZXJlciIsIldlYkdMUmVuZGVyZXIiLCJhbnRpYWxpYXNpbmciLCJjbGVhckNvbG9yIiwiY2xlYXJBbHBoYSIsInNldFBpeGVsUmF0aW8iLCJkZXZpY2VQaXhlbFJhdGlvIiwiYXV0b0NsZWFyIiwiYW5pbWF0aW9uRnJhbWUiLCJvYmplY3RSZW5kZXJlcnMiLCJudW1NYXNrcyIsIm1hcCIsImJvdW5kcyIsImdldEJvdW5kcyIsInRvcExlZnQiLCJnb29nbGUiLCJtYXBzIiwiTGF0TG5nIiwiZ2V0Tm9ydGhFYXN0IiwibGF0IiwiZ2V0U291dGhXZXN0IiwibG5nIiwiZG9tRWxlbWVudCIsImdldFByb2plY3Rpb24iLCJmcm9tTGF0TG5nVG9EaXZQaXhlbCIsInJvdW5kIiwiZ2V0RGl2IiwiY2xpZW50V2lkdGgiLCJjbGllbnRIZWlnaHQiLCJzZXRTaXplIiwiem9vbSIsImdldFpvb20iLCJmcm9tTGF0TG5nVG9Qb2ludCIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiZGVmZXJyZWRSZW5kZXIiLCJtYXNrRW5hYmxlZCIsImNvbG9yTWFzayIsImRlcHRoTWFzayIsImVuYWJsZSIsIlNURU5DSUxfVEVTVCIsInN0ZW5jaWxPcCIsIlJFUExBQ0UiLCJzdGVuY2lsRnVuYyIsIkFMV0FZUyIsImNsZWFyU3RlbmNpbCIsInJlbmRlciIsIkVRVUFMIiwiS0VFUCIsImRpc2FibGUiLCJfIiwiZXh0ZW5kIiwiT3ZlcmxheVZpZXciLCJvbkFkZCIsImdldFBhbmVzIiwib3ZlcmxheUxheWVyIiwiYXBwZW5kQ2hpbGQiLCJvblJlbW92ZSIsInBhcmVudEVsZW1lbnQiLCJyZW1vdmVDaGlsZCIsInJlbW92ZUV2ZW50TGlzdGVuZXJzIiwicG9pbnRSZW5kZXJlciIsInNwcml0ZVJlbmRlcmVyIiwicG9seWdvblJlbmRlcmVyIiwiY2hhbmdlSGFuZGxlciIsImFkZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJhZGRPYmplY3QiLCJyZW1vdmVPYmplY3QiLCJhZGRQb2ludCIsInJlbW92ZVBvaW50IiwiYWRkU3ByaXRlIiwicmVtb3ZlU3ByaXRlIiwiY3JlYXRlR2VvbWV0cnkiLCJhZGRHZW9tZXRyeSIsInJlbW92ZUdlb21ldHJ5IiwiZGVzdHJveUdlb21ldHJ5IiwiY3JlYXRlTWFzayIsIm1hc2siLCJhZGRNYXNrIiwicmVtb3ZlTWFzayIsImRlc3Ryb3lNYXNrIiwiaHR0cCIsImRlZmVycmVkIiwiUSIsImRlZmVyIiwicmVzcG9uc2VUeXBlIiwiJCIsImF0dHIiLCJvbiIsInJlc29sdmUiLCJhamF4Iiwic3VjY2VzcyIsInN0YXR1cyIsInhociIsImVycm9yIiwicmVqZWN0IiwicHJvbWlzZSIsImNvbnZlcnRQb2ludFRvVGlsZSIsImxhdExuZyIsInByb2plY3Rpb24iLCJ3b3JsZENvb3JkaW5hdGUiLCJwaXhlbENvb3JkaW5hdGUiLCJ0aWxlQ29vcmRpbmF0ZSIsImZsb29yIiwiTUVSQ0FUT1JfUkFOR0UiLCJUaWxlQ29udHJvbGxlciIsIm1pblpvb20iLCJtYXhab29tIiwiZW5hYmxlZCIsInZpZXdzIiwic2V0TWFwIiwiX2FkZEV2ZW50TGlzdGVuZXJzIiwiX3JlbW92ZUV2ZW50TGlzdGVuZXJzIiwiYWRkVmlldyIsInZpZXciLCJpbmRleE9mIiwic2V0VGlsZVNpemUiLCJzaG93VGlsZXMiLCJyZW1vdmVWaWV3Iiwic3BsaWNlIiwiY2hhbmdlTGlzdGVuZXIiLCJoYXNDaGFuZ2VkWm9vbSIsImhhc0NoYW5nZWRCb3VuZHMiLCJ2aXNpYmxlQm91bmRzIiwiY3VycmVudEJvdW5kcyIsImJvdW5kc05lTGF0TG5nIiwiYm91bmRzU3dMYXRMbmciLCJib3VuZHNOd0xhdExuZyIsImJvdW5kc1NlTGF0TG5nIiwidGlsZUNvb3JkaW5hdGVOdyIsInRpbGVDb29yZGluYXRlU2UiLCJyYW5nZSIsInVwZGF0ZVRpbGVzIiwiY29sdW1uIiwicm93Iiwic2hvd1RpbGUiLCJoaWRlVGlsZSIsIkdlb0pTT05EYXRhU291cmNlIiwiZmlsZUV4dGVuc2lvbiIsInBhcnNlIiwiZmVhdHVyZUNvbGxlY3Rpb24iLCJfcGFyc2VGZWF0dXJlIiwicG9seWdvbnMiLCJfcGFyc2VQb2x5Z29uIiwiY29vcmRpbmF0ZXMiLCJJbWFnZURhdGFTb3VyY2UiLCJUaWxlUHJvdmlkZXIiLCJkYXRhU291cmNlIiwiJGh0dHAiLCIkcSIsImdldFRpbGVVcmwiLCJnZXRUaWxlIiwic2VsZiIsInRoZW4iLCJyZXNwb25zZSIsInJlYXNvbiIsIkltYWdlVGlsZVZpZXciLCJ0aWxlUHJvdmlkZXIiLCJ0aWxlU2l6ZSIsInNjYWxlRmFjdG9yIiwic3ByaXRlU2l6ZSIsInNwcml0ZU9wdGlvbnMiLCJnZXRSYW5kb21Db2xvciIsInJhbmRvbSIsIlZlY3RvclRpbGVWaWV3IiwidXNlUmFuZG9tQ29sb3JzIiwic2hvd25UaWxlcyJdLCJtYXBwaW5ncyI6IkFBQ0EsR0FBQUEsV0NEQSxTQUFBQyxHQUNBLEdBQUFDLEdBQUEsU0FBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FDQUMsS0FBQUosRUFBQUEsRUFDQUksS0FBQUgsRUFBQUEsRUFDQUcsS0FBQUYsTUFBQUEsRUFDQUUsS0FBQUQsT0FBQUEsRUFDQUMsS0FBQUMs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TUFBQXZDLEdBQUF3VSxFQUNBRixFQUFBYyxXQUFBcFYsR0FBQSxDQUNBLEdBQUFNLEtBQ0FBLEdBQUE0RixTQUFBb08sRUFBQS9SLE1BQUF2QyxHQUFBZ0ssS0FDQTFKLEVBQUE2RixVQUFBbU8sRUFBQWEsZ0JBQUFILElBQUEsS0FDQVYsRUFBQS9SLE1BQUF2QyxHQUFBeUMsU0FBQTZSLEVBQUFsVCxVQUFBa08sZUFBQWhQLEdBQ0FnVSxFQUFBbFQsVUFBQWpCLFNBRUEsU0FBQXNVLFFBTUFTLEVBQUFqWSxVQUFBcVcsU0FBQSxTQUFBOVcsRUFBQUMsRUFBQStILEdBQ0EsR0FBQXhFLEdBQUFwRCxLQUFBK1gsYUFBQVAsV0FBQTVYLEVBQUFDLEVBQUErSCxFQUNBNUgsTUFBQXdZLFdBQUFwVixJQUFBLEVBRUFwRCxLQUFBMkYsTUFBQXZDLElBQUFwRCxLQUFBMkYsTUFBQXZDLEdBQUF5QyxXQUNBN0YsS0FBQXdFLFVBQUFvTyxlQUFBNVMsS0FBQTJGLE1BQUF2QyxHQUFBeUMsZ0JBQ0E3RixNQUFBMkYsTUFBQXZDLEdBQUF5QyxTQUNBN0YsS0FBQTJGLE1BQUF2QyxHQUFBeUMsU0FBQSxPQUlBeVMsRUFBQWpZLFVBQUFzQixNQUFBLFdBQ0EsSUFBQSxHQUFBeUIsS0FBQXBELE1BQUEyRixNQUNBM0YsS0FBQTJGLE1BQUF2QyxHQUFBeUMsVUFDQTdGLEtBQUF3RSxVQUFBb08sZUFBQTVTLEtBQUEyRixNQUFBdkMsR0FBQXlDLFNBRUE3RixNQUFBd0UsVUFBQWpCLFFBR0ExQyxPQUFBeVgsZUFBQUEiLCJmaWxlIjoiY2FydGUubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gZGVjbGFyZSBwYWNrYWdlIG5hbWVzXG52YXIgY2FydGUgPSB7fTsiLCIoZnVuY3Rpb24ocGtnKXtcblx0dmFyIFJlY3RhbmdsZSA9IGZ1bmN0aW9uKHgsIHksIHdpZHRoLCBoZWlnaHQpIHtcblx0XHR0aGlzLnggPSB4O1xuXHRcdHRoaXMueSA9IHk7XG5cdFx0dGhpcy53aWR0aCA9IHdpZHRoO1xuXHRcdHRoaXMuaGVpZ2h0ID0gaGVpZ2h0O1xuXHRcdHRoaXMudWx4ID0geDtcblx0XHR0aGlzLnVseSA9IHk7XG5cdFx0dGhpcy5scnggPSB4K3dpZHRoO1xuXHRcdHRoaXMubHJ5ID0geSt3aWR0aDtcblx0fTtcblxuXHRSZWN0YW5nbGUucHJvdG90eXBlLmNvbnRhaW5zUG9pbnQgPSBmdW5jdGlvbih4LCB5KSB7XG5cdFx0cmV0dXJuIHRoaXMudWx4PD14ICYmIHg8PXRoaXMubHJ4ICYmIHRoaXMudWx5PD15ICYmIHk8PXRoaXMubHJ5O1xuXHR9O1xuXG5cdFJlY3RhbmdsZS5wcm90b3R5cGUuY29udGFpbnNSZWN0ID0gZnVuY3Rpb24ocmVjdCkge1xuXHRcdHJldHVybiB0aGlzLmNvbnRhaW5zUG9pbnQocmVjdC54LCByZWN0LnkpICYmIFxuXHRcdFx0dGhpcy5jb250YWluc1BvaW50KHJlY3QueCtyZWN0LndpZHRoLCByZWN0LnkrcmVjdC5oZWlnaHQpO1xuXHR9O1xuXG5cdFJlY3RhbmdsZS5wcm90b3R5cGUuY29udGFpbnNEaW1lbnNpb25zID0gZnVuY3Rpb24od2lkdGgsIGhlaWdodCkge1xuXHRcdHJldHVybiB0aGlzLndpZHRoID49IHdpZHRoICYmIHRoaXMuaGVpZ2h0ID49IGhlaWdodDtcblx0fTtcblxuXHRSZWN0YW5nbGUucHJvdG90eXBlLmdldE5vcm1hbGl6ZWRSZWN0ID0gZnVuY3Rpb24obWF4V2lkdGgsIG1heEhlaWdodCkge1xuXHRcdHZhciB4ID0gdGhpcy54IC8gbWF4V2lkdGgsXG5cdFx0XHR5ID0gdGhpcy55IC8gbWF4SGVpZ2h0LFxuXHRcdFx0d2lkdGggPSB0aGlzLndpZHRoIC8gbWF4V2lkdGgsXG5cdFx0XHRoZWlnaHQgPSB0aGlzLmhlaWdodCAvIG1heEhlaWdodDtcblx0XHRyZXR1cm4gbmV3IFJlY3RhbmdsZSh4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcblx0fTtcblxuXHR3aW5kb3cuUmVjdGFuZ2xlID0gUmVjdGFuZ2xlO1xufShjYXJ0ZSkpOyIsIihmdW5jdGlvbigpe1xuXHR2YXIgU3ByaXRlTm9kZSA9IGZ1bmN0aW9uKHJlY3QpIHtcblx0XHR0aGlzLnJlY3QgPSByZWN0O1xuXHRcdHRoaXMubmFtZSA9IFwic3ByaXRlMFwiO1xuXHRcdHRoaXMuaW1hZ2UgPSBudWxsO1xuXHRcdHRoaXMuY2hpbGQgPSBbXTtcblx0fTtcblxuXHRTcHJpdGVOb2RlLnByb3RvdHlwZS5jb21wdXRlTm9ybWFsID0gZnVuY3Rpb24obWF4V2lkdGgsIG1heEhlaWdodCkge1xuXHRcdHRoaXMubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHR0aGlzLm1heEhlaWdodCA9IG1heEhlaWdodDtcblx0XHR0aGlzLm5vcm1hbFJlY3QgPSB0aGlzLnJlY3QuZ2V0Tm9ybWFsaXplZFJlY3QobWF4V2lkdGgsIG1heEhlaWdodCk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0LyoqXG5cdCAqIFBlcmZvcm0gbWF4IHJlY3QgYWxnb3JpdGhtIGZvciBmaW5kaW5nIHdoZXJlIHRvIGZpdCB0aGUgaW1hZ2UuXG5cdCAqIFNhbXBsZSBpbXBsZW1lbnRhdGlvbiBmb3IgbGlnaHRtYXBzOiBodHRwOi8vd3d3LmJsYWNrcGF3bi5jb20vdGV4dHMvbGlnaHRtYXBzL1xuXHQgKi9cblx0U3ByaXRlTm9kZS5wcm90b3R5cGUuaW5zZXJ0ID0gZnVuY3Rpb24obmFtZSwgaW1hZ2UpIHtcblx0XHR2YXIgbmV3Tm9kZSA9IG51bGw7XG5cdFx0aWYodGhpcy5pbWFnZSAhPT0gbnVsbCkge1xuXHRcdFx0Ly8gdGhpcyBhbHJlYWR5IGNvbnRhaW5zIGFuIGltYWdlIHNvIGxldCdzIGNoZWNrIGl0J3MgY2hpbGRyZW5cblx0XHRcdGlmKHRoaXMuY2hpbGQubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRuZXdOb2RlID0gdGhpcy5jaGlsZFswXS5pbnNlcnQobmFtZSwgaW1hZ2UpO1xuXHRcdFx0XHRpZihuZXdOb2RlICE9PSBudWxsKSByZXR1cm4gbmV3Tm9kZTtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY2hpbGRbMV0uaW5zZXJ0KG5hbWUsIGltYWdlKTtcblx0XHRcdH1cblx0XHRcdC8vIHRoaXMgaXMgYSBsZWFmIG5vZGUgYW5kIGFscmVhZHkgY29udGFpbnMgYW4gaW1hZ2UgdGhhdCAnanVzdCBmaXRzJ1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmKHRoaXMucmVjdC5jb250YWluc0RpbWVuc2lvbnMoaW1hZ2Uud2lkdGgsIGltYWdlLmhlaWdodCkpIHtcblx0XHRcdFx0aWYodGhpcy5yZWN0LndpZHRoID09IGltYWdlLndpZHRoICYmIHRoaXMucmVjdC5oZWlnaHQgPT0gaW1hZ2UuaGVpZ2h0KSB7XG5cdFx0XHRcdFx0dGhpcy5uYW1lID0gbmFtZTtcblx0XHRcdFx0XHR0aGlzLmltYWdlID0gaW1hZ2U7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZih0aGlzLmNoaWxkLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0XHRuZXdOb2RlID0gdGhpcy5jaGlsZFswXS5pbnNlcnQobmFtZSwgaW1hZ2UpO1xuXHRcdFx0XHRcdGlmKG5ld05vZGUgIT09IG51bGwpIHJldHVybiBuZXdOb2RlO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzLmNoaWxkWzFdLmluc2VydChuYW1lLCBpbWFnZSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dmFyIHJlY3QgPSB0aGlzLnJlY3Q7XG5cdFx0XHRcdFx0dmFyIGRXID0gdGhpcy5yZWN0LndpZHRoIC0gaW1hZ2Uud2lkdGg7XG5cdFx0XHRcdFx0dmFyIGRIID0gdGhpcy5yZWN0LmhlaWdodCAtIGltYWdlLmhlaWdodDtcblx0XHRcdFx0XHRpZihkVyA+IGRIKSB7XG5cdFx0XHRcdFx0XHQvLyBzcGxpdCB0aGlzIHJlY3RhbmdsZSB2ZXJ0aWNhbGx5IGludG8gdHdvLCBsZWZ0IGFuZCByaWdodFxuXHRcdFx0XHRcdFx0dGhpcy5jaGlsZFswXSA9IG5ldyBTcHJpdGVOb2RlKG5ldyBSZWN0YW5nbGUocmVjdC54LCByZWN0LnksIGltYWdlLndpZHRoLCByZWN0LmhlaWdodCkpO1xuXHRcdFx0XHRcdFx0dGhpcy5jaGlsZFsxXSA9IG5ldyBTcHJpdGVOb2RlKG5ldyBSZWN0YW5nbGUocmVjdC54K2ltYWdlLndpZHRoLCByZWN0LnksIGRXLCByZWN0LmhlaWdodCkpO1xuXHRcdFx0XHRcdH1lbHNle1xuXHRcdFx0XHRcdFx0Ly8gc3BsaXQgdGhpcyByZWN0YW5nbGUgaG9yaXpvbnRhbGx5IGludG8gdHdvLCBvbmUgYWJvdmUgYW5vdGhlciBiZWxvd1xuXHRcdFx0XHRcdFx0dGhpcy5jaGlsZFswXSA9IG5ldyBTcHJpdGVOb2RlKG5ldyBSZWN0YW5nbGUocmVjdC54LCByZWN0LnksIHJlY3Qud2lkdGgsIGltYWdlLmhlaWdodCkpO1xuXHRcdFx0XHRcdFx0dGhpcy5jaGlsZFsxXSA9IG5ldyBTcHJpdGVOb2RlKG5ldyBSZWN0YW5nbGUocmVjdC54LCByZWN0LnkraW1hZ2UuaGVpZ2h0LCByZWN0LndpZHRoLCBkSCkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR0aGlzLmNoaWxkWzBdLmNvbXB1dGVOb3JtYWwodGhpcy5tYXhXaWR0aCwgdGhpcy5tYXhIZWlnaHQpO1xuXHRcdFx0XHRcdHRoaXMuY2hpbGRbMV0uY29tcHV0ZU5vcm1hbCh0aGlzLm1heFdpZHRoLCB0aGlzLm1heEhlaWdodCk7XG5cdFx0XHRcdFx0Ly8gdGhpcyBpbWFnZSBzaG91bGQgYXV0b21hdGljYWxseSBmaXQgdGhlIGZpcnN0IG5vZGVcblx0XHRcdFx0XHRyZXR1cm4gdGhpcy5jaGlsZFswXS5pbnNlcnQobmFtZSwgaW1hZ2UpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHQvLyB0aGlzIHdpbGwgbm90IGZpdCB0aGlzIG5vZGVcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblx0fTtcblxuXHRTcHJpdGVOb2RlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbihuYW1lKSB7XG5cdFx0aWYodGhpcy5uYW1lID09IG5hbWUpIHJldHVybiB0aGlzO1xuXHRcdGlmKHRoaXMuY2hpbGQubGVuZ3RoID4gMCkge1xuXHRcdFx0dmFyIG5vZGUgPSB0aGlzLmNoaWxkWzBdLmdldChuYW1lKTtcblx0XHRcdGlmKG5vZGUgIT09IG51bGwpIHJldHVybiBub2RlO1xuXHRcdFx0cmV0dXJuIHRoaXMuY2hpbGRbMV0uZ2V0KG5hbWUpO1xuXHRcdH1cblx0XHRyZXR1cm4gbnVsbDtcblx0fTtcblxuXHRTcHJpdGVOb2RlLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbihuYW1lKSB7XG5cdFx0dmFyIG5vZGUgPSB0aGlzLmdldChuYW1lKTtcblx0XHRpZihub2RlKSBub2RlLmNsZWFyKCk7XG5cdFx0cmV0dXJuIG5vZGU7XG5cdH07XG5cblx0U3ByaXRlTm9kZS5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHtcblx0XHR0aGlzLm5hbWUgPSBcIlwiO1xuXHRcdHRoaXMuaW1hZ2UgPSBudWxsO1xuXHR9O1xuXG5cdHZhciBEeW5hbWljU3ByaXRlU2hlZXQgPSBmdW5jdGlvbih3aWR0aCwgaGVpZ2h0KSB7XG5cdFx0dGhpcy5jYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcblx0XHR0aGlzLmNhbnZhcy53aWR0aCA9IHdpZHRoO1xuXHRcdHRoaXMuY2FudmFzLmhlaWdodCA9IGhlaWdodDtcblxuXHRcdHRoaXMuY29udGV4dCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG5cdFx0XG5cdFx0dGhpcy50ZXh0dXJlID0gbmV3IFRIUkVFLlRleHR1cmUodGhpcy5jYW52YXMpO1xuXHRcdHRoaXMudGV4dHVyZS5taW5GaWx0ZXIgPSBUSFJFRS5OZWFyZXN0RmlsdGVyO1xuXHRcdHRoaXMudGV4dHVyZS5tYWdGaWx0ZXIgPSBUSFJFRS5OZWFyZXN0RmlsdGVyO1xuXHRcdHRoaXMudGV4dHVyZS5mbGlwWSA9IGZhbHNlO1xuXG5cdFx0dGhpcy5wbm9kZSA9IG5ldyBTcHJpdGVOb2RlKG5ldyBSZWN0YW5nbGUoMCwgMCwgd2lkdGgsIGhlaWdodCkpO1xuXHRcdHRoaXMucG5vZGUuY29tcHV0ZU5vcm1hbCh3aWR0aCwgaGVpZ2h0KTtcblx0fTtcblxuXHREeW5hbWljU3ByaXRlU2hlZXQucHJvdG90eXBlID0gbmV3IFRIUkVFLkV2ZW50RGlzcGF0Y2hlcigpO1xuXHREeW5hbWljU3ByaXRlU2hlZXQucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gRHluYW1pY1Nwcml0ZVNoZWV0O1xuXG5cdER5bmFtaWNTcHJpdGVTaGVldC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24obmFtZSkge1xuXHRcdHJldHVybiB0aGlzLnBub2RlLmdldChuYW1lKTtcblx0fTtcblxuXHREeW5hbWljU3ByaXRlU2hlZXQucHJvdG90eXBlLmFkZCA9IGZ1bmN0aW9uKG5hbWUsIGltYWdlKSB7XG5cdFx0aWYodGhpcy5nZXQobmFtZSkgIT09IG51bGwpIHJldHVybiBudWxsO1xuXHRcdHZhciBub2RlID0gdGhpcy5wbm9kZS5pbnNlcnQobmFtZSwgaW1hZ2UpO1xuXHRcdGlmKG5vZGUpIHtcblx0XHRcdHZhciByZWN0ID0gbm9kZS5yZWN0O1xuXHRcdFx0dGhpcy5jb250ZXh0LmRyYXdJbWFnZShpbWFnZSwgcmVjdC54LCByZWN0LnkpO1xuXHRcdFx0dGhpcy50ZXh0dXJlLm5lZWRzVXBkYXRlID0gdHJ1ZTtcblx0XHRcdHRoaXMuZGlzcGF0Y2hFdmVudCh7dHlwZTogJ3Nwcml0ZV9hZGRlZCd9KTtcblx0XHR9XG5cdFx0cmV0dXJuIG5vZGU7XG5cdH07XG5cblx0RHluYW1pY1Nwcml0ZVNoZWV0LnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbihuYW1lKSB7XG5cdFx0dmFyIG5vZGUgPSB0aGlzLnBub2RlLmRlbGV0ZShuYW1lKTtcblx0XHRpZihub2RlKSB7XG5cdFx0XHR2YXIgcmVjdCA9IG5vZGUucmVjdDtcblx0XHRcdHRoaXMuY29udGV4dC5jbGVhclJlY3QocmVjdC54LCByZWN0LnksIHJlY3Qud2lkdGgsIHJlY3QuaGVpZ2h0KTtcblx0XHRcdHRoaXMudGV4dHVyZS5uZWVkc1VwZGF0ZSA9IHRydWU7XG5cdFx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoe3R5cGU6ICdzcHJpdGVfcmVtb3ZlZCd9KTtcblx0XHR9XG5cdFx0cmV0dXJuIG5vZGU7XG5cdH07XG5cblx0RHluYW1pY1Nwcml0ZVNoZWV0LnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24obmFtZSwgdXJsKSB7XG5cblx0fTtcblxuXHR3aW5kb3cuRHluYW1pY1Nwcml0ZVNoZWV0ID0gRHluYW1pY1Nwcml0ZVNoZWV0O1xufSgpKTsiLCIoZnVuY3Rpb24oKXtcblx0dmFyIE9iamVjdFJlbmRlcmVyID0gZnVuY3Rpb24oKSB7fTtcblxuXHRPYmplY3RSZW5kZXJlci5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uKCkgeyBcblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHRPYmplY3RSZW5kZXJlci5wcm90b3R5cGUuZHJhdyA9IGZ1bmN0aW9uKCkge1xuXG5cdH07XG5cblx0T2JqZWN0UmVuZGVyZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xuXG5cdH07XG5cblx0T2JqZWN0UmVuZGVyZXIucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcblxuXHR9O1xuXG5cdE9iamVjdFJlbmRlcmVyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbihvYmplY3QpIHtcblxuXHR9O1xuXG5cdE9iamVjdFJlbmRlcmVyLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbihvYmplY3QpIHtcblxuXHR9O1xuXG5cdE9iamVjdFJlbmRlcmVyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24ob2JqZWN0KSB7XG5cblx0fTtcblxuXHR3aW5kb3cuT2JqZWN0UmVuZGVyZXIgPSBPYmplY3RSZW5kZXJlcjtcbn0oKSk7IiwiKGZ1bmN0aW9uKCl7XG5cdHZhciB2c2hhZGVyID0gKGZ1bmN0aW9uICgpIHsvKlxuXHRcdHVuaWZvcm0gZmxvYXQgcG9pbnRTaXplO1xuXHRcdGF0dHJpYnV0ZSB2ZWM0IHRpbGU7XG5cdFx0dmFyeWluZyB2ZWM0IHZUaWxlO1xuXHRcdHZhcnlpbmcgdmVjMyB2Q29sb3I7XG5cblx0XHR2b2lkIG1haW4oKSB7XG5cdFx0XHR2ZWM0IG12UG9zaXRpb24gPSBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KHBvc2l0aW9uLCAxLjApO1xuXHRcdFx0Z2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbXZQb3NpdGlvbjtcblx0XHRcdGdsX1BvaW50U2l6ZSA9IHBvaW50U2l6ZTtcblx0XHRcdHZUaWxlID0gdGlsZTtcblx0XHRcdHZDb2xvciA9IGNvbG9yO1xuXHRcdH1cblx0Ki99KS50b1N0cmluZygpLm1hdGNoKC9bXl0qXFwvXFwqKFteXSopXFwqXFwvXFx9JC8pWzFdO1xuXG5cdHZhciBmc2hhZGVyID0gKGZ1bmN0aW9uICgpIHsvKlxuXHRcdHVuaWZvcm0gc2FtcGxlcjJEIHRleDE7XG5cdFx0dW5pZm9ybSB2ZWMyIHNwcml0ZVNpemU7XG5cdFx0dmFyeWluZyB2ZWM0IHZUaWxlO1xuXHRcdHZhcnlpbmcgdmVjMyB2Q29sb3I7XG5cblx0XHR2b2lkIG1haW4oKSB7XG5cdFx0XHR2ZWMyIHRpbGVVViA9IHZUaWxlLnh5ICsgdlRpbGUuencgKiBnbF9Qb2ludENvb3JkO1xuXHRcdFx0Z2xfRnJhZ0NvbG9yID0gdGV4dHVyZTJEKHRleDEsIHRpbGVVVikgKiB2ZWM0KHZDb2xvci5yZ2IsIDEuMCk7XG5cdFx0fVxuXHQqL30pLnRvU3RyaW5nKCkubWF0Y2goL1teXSpcXC9cXCooW15dKilcXCpcXC9cXH0kLylbMV07XG5cblx0dmFyIE1BWF9DT1VOVCA9IE1hdGgucG93KDIsMzIpIC0gMTtcblx0dmFyIFNUQVJUX1ZBTFVFID0gLTk5OTk5LjA7XG5cblx0dmFyIE1hcmtlciA9IGZ1bmN0aW9uKCkge307XG5cdE1hcmtlci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFRIUkVFLkV2ZW50RGlzcGF0Y2hlci5wcm90b3R5cGUpO1xuXG5cdHZhciBQb2ludFJlbmRlcmVyID0gZnVuY3Rpb24od2ViR2xWaWV3KSB7XG5cdFx0dGhpcy53ZWJHbFZpZXcgPSB3ZWJHbFZpZXc7XG5cdFx0dGhpcy5wb2ludFNpemUgPSAzMi4wO1xuXG5cdFx0dGhpcy5yYXljYXN0ZXIgPSBuZXcgVEhSRUUuUmF5Y2FzdGVyKCk7XG5cdFx0dGhpcy5tb3VzZSA9IG5ldyBUSFJFRS5WZWN0b3IyKCk7XG5cdFx0dGhpcy5tYXJrZXJzID0ge307XG5cdFx0dGhpcy5ob3ZlcmVkTWFya2VyID0gbnVsbDtcblxuXHRcdHRoaXMubWluSW5kZXggPSBNQVhfQ09VTlQ7XG5cdFx0dGhpcy5tYXhJbmRleCA9IDA7XG5cdFx0dGhpcy5pbmRleCA9IDA7XG5cdH07XG5cblx0UG9pbnRSZW5kZXJlci5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMucG9zaXRpb25zID0gbmV3IEZsb2F0MzJBcnJheSgxMDAwMDAwICogMyk7XG5cdFx0dGhpcy5wb3NpdGlvbnMuZmlsbChTVEFSVF9WQUxVRSk7XG5cdFx0dGhpcy5wb3NpdGlvbnNBdHRyaWJ1dGUgPSBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKHRoaXMucG9zaXRpb25zLCAzKTtcblx0XHR0aGlzLnBvc2l0aW9uc0F0dHJpYnV0ZS5zZXREeW5hbWljKHRydWUpO1xuXG5cdFx0dGhpcy5jb2xvcnMgPSBuZXcgRmxvYXQzMkFycmF5KDEwMDAwMDAgKiAzKTtcblx0XHR0aGlzLmNvbG9yc0F0dHJpYnV0ZSA9IG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUodGhpcy5jb2xvcnMsIDMpO1xuXHRcdHRoaXMuY29sb3JzQXR0cmlidXRlLnNldER5bmFtaWModHJ1ZSk7XG5cblx0XHR0aGlzLnRpbGVzID0gbmV3IEZsb2F0MzJBcnJheSgxMDAwMDAwICogNCk7IFxuXHRcdHRoaXMudGlsZXNBdHRyaWJ1dGUgPSBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKHRoaXMudGlsZXMsIDQpOyBcblx0XHR0aGlzLnRpbGVzQXR0cmlidXRlLnNldER5bmFtaWModHJ1ZSk7XG5cblx0XHR0aGlzLmdlb21ldHJ5ID0gbmV3IFRIUkVFLkJ1ZmZlckdlb21ldHJ5KCk7XG5cdFx0dGhpcy5nZW9tZXRyeS5hZGRBdHRyaWJ1dGUoJ3Bvc2l0aW9uJywgdGhpcy5wb3NpdGlvbnNBdHRyaWJ1dGUpO1xuXHRcdHRoaXMuZ2VvbWV0cnkuYWRkQXR0cmlidXRlKCdjb2xvcicsIHRoaXMuY29sb3JzQXR0cmlidXRlKTtcblx0XHR0aGlzLmdlb21ldHJ5LmFkZEF0dHJpYnV0ZSgndGlsZScsIHRoaXMudGlsZXNBdHRyaWJ1dGUpO1xuXG5cdFx0dGhpcy5zcHJpdGVTaGVldCA9IG5ldyBEeW5hbWljU3ByaXRlU2hlZXQoMjU2LCAyNTYpO1xuXHRcdHRoaXMubWF0ZXJpYWwgPSBuZXcgVEhSRUUuU2hhZGVyTWF0ZXJpYWwoIHtcblx0XHRcdHVuaWZvcm1zOiB7XG5cdFx0XHRcdHRleDE6IHsgdHlwZTogXCJ0XCIsIHZhbHVlOiB0aGlzLnNwcml0ZVNoZWV0LnRleHR1cmUgfSxcblx0XHRcdFx0cG9pbnRTaXplOiB7IHR5cGU6IFwiZlwiLCB2YWx1ZTogdGhpcy5wb2ludFNpemUgfVxuXHRcdFx0fSxcblx0XHRcdHZlcnRleENvbG9yczogVEhSRUUuVmVydGV4Q29sb3JzLFxuXHRcdFx0dmVydGV4U2hhZGVyOiB2c2hhZGVyLFxuXHRcdFx0ZnJhZ21lbnRTaGFkZXI6IGZzaGFkZXIsXG5cdFx0XHR0cmFuc3BhcmVudDogdHJ1ZSxcblx0XHRcdGRlcHRoV3JpdGU6IGZhbHNlLFxuXHRcdFx0ZGVwdGhUZXN0OiBmYWxzZVxuXHRcdH0pO1xuXG5cdFx0dGhpcy5zY2VuZU9iamVjdCA9IG5ldyBUSFJFRS5Qb2ludHModGhpcy5nZW9tZXRyeSwgdGhpcy5tYXRlcmlhbCk7XG5cdFx0dGhpcy5yYXljYXN0T2JqZWN0cyA9IFt0aGlzLnNjZW5lT2JqZWN0XTtcblx0XHR0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7XG5cblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHRQb2ludFJlbmRlcmVyLnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVycyA9IGZ1bmN0aW9uKCkge1xuXHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMuaGFuZGxlRG9jdW1lbnRNb3VzZU1vdmUuYmluZCh0aGlzKSwgZmFsc2UpO1xuXHRcdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVEb2N1bWVudE1vdXNlQ2xpY2suYmluZCh0aGlzKSwgZmFsc2UpO1xuXHR9O1xuXG5cdFBvaW50UmVuZGVyZXIucHJvdG90eXBlLmhhbmRsZURvY3VtZW50TW91c2VNb3ZlID0gZnVuY3Rpb24oZXZlbnQpIHtcblx0XHR0aGlzLnVwZGF0ZShldmVudCk7XG5cdH07XG5cblx0UG9pbnRSZW5kZXJlci5wcm90b3R5cGUuaGFuZGxlRG9jdW1lbnRNb3VzZUNsaWNrID0gZnVuY3Rpb24oZXZlbnQpIHtcblx0XHR0aGlzLnVwZGF0ZShldmVudCk7XG5cdFx0aWYodGhpcy5ob3ZlcmVkTWFya2VyKSBcblx0XHRcdHRoaXMuaG92ZXJlZE1hcmtlci5kaXNwYXRjaEV2ZW50KHt0eXBlOiBcImNsaWNrXCJ9KTtcblx0fTtcblxuXHRQb2ludFJlbmRlcmVyLnByb3RvdHlwZS5fY3JlYXRlTWFya2VyID0gZnVuY3Rpb24oaW5kZXgpIHtcblx0XHR2YXIgbWFya2VyID0gbmV3IE1hcmtlcigpO1xuXHRcdG1hcmtlci5pbmRleCA9IGluZGV4O1xuXHRcdHRoaXMubWFya2Vyc1tpbmRleF0gPSBtYXJrZXI7XG5cdFx0cmV0dXJuIG1hcmtlcjtcblx0fTtcblxuXHRQb2ludFJlbmRlcmVyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbihvcHRpb25zKSB7XG5cdFx0dmFyIGFycmF5SW5kZXggPSB0aGlzLmluZGV4ICogMztcblx0XHR3aGlsZShhcnJheUluZGV4IDwgdGhpcy5wb3NpdGlvbnMubGVuZ3RoICYmIHRoaXMucG9zaXRpb25zW2FycmF5SW5kZXhdICE9PSBTVEFSVF9WQUxVRSlcblx0XHRcdGFycmF5SW5kZXggPSArK3RoaXMuaW5kZXgqMztcblxuXHRcdGlmKGFycmF5SW5kZXggPj0gdGhpcy5wb3NpdGlvbnMubGVuZ3RoKXtcblx0XHRcdC8vIVRPRE86IEV4cGFuZCBwb2ludHMgYnVmZmVyXG5cdFx0XHRjb25zb2xlLmxvZyhcIltQb2ludFJlbmRlcmVyXSBSdW4gb3V0IG9mIHBvaW50cyEhIVwiKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblx0XHRvcHRpb25zLnBvc2l0aW9uID0gb3B0aW9ucy5wb3NpdGlvbiB8fCB7eDowLCB5OjAsIHo6MH07XG5cdFx0b3B0aW9ucy5jb2xvciA9IG9wdGlvbnMuY29sb3IgfHwge3I6MSwgZzoxLCBiOjF9O1xuXG5cdFx0dGhpcy5wb3NpdGlvbnNbYXJyYXlJbmRleCArIDBdID0gb3B0aW9ucy5wb3NpdGlvbi54O1xuXHRcdHRoaXMucG9zaXRpb25zW2FycmF5SW5kZXggKyAxXSA9IG9wdGlvbnMucG9zaXRpb24ueTtcblx0XHR0aGlzLnBvc2l0aW9uc1thcnJheUluZGV4ICsgMl0gPSBvcHRpb25zLnBvc2l0aW9uLno7XG5cblx0XHR0aGlzLmNvbG9yc1thcnJheUluZGV4ICsgMF0gPSBvcHRpb25zLmNvbG9yLnI7XG5cdFx0dGhpcy5jb2xvcnNbYXJyYXlJbmRleCArIDFdID0gb3B0aW9ucy5jb2xvci5nO1xuXHRcdHRoaXMuY29sb3JzW2FycmF5SW5kZXggKyAyXSA9IG9wdGlvbnMuY29sb3IuYjtcblxuXHRcdHZhciBzcHJpdGUgPSB0aGlzLnNwcml0ZVNoZWV0LmdldChvcHRpb25zLmltYWdlTmFtZSk7XG5cdFx0aWYoIXNwcml0ZSkge1xuXHRcdFx0c3ByaXRlID0gdGhpcy5zcHJpdGVTaGVldC5hZGQob3B0aW9ucy5pbWFnZU5hbWUsIG9wdGlvbnMuaW1hZ2UpO1xuXHRcdFx0aWYoIXNwcml0ZSkge1xuXHRcdFx0XHRjb25zb2xlLmxvZyhcIltQb2ludFJlbmRlcmVyXSBTcHJpdGVTaGVldCBhbHJlYWR5IGZ1bGwuXCIpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR2YXIgc3ByaXRlUmVjdCA9IHNwcml0ZSAhPT0gbnVsbCA/IHNwcml0ZS5ub3JtYWxSZWN0IDoge3g6MCwgeTowLCB3aWR0aDowLCBoZWlnaHQ6MH07XG5cdFx0dGhpcy50aWxlc1t0aGlzLmluZGV4KjQgKyAwXSA9IHNwcml0ZVJlY3QueDtcblx0XHR0aGlzLnRpbGVzW3RoaXMuaW5kZXgqNCArIDFdID0gc3ByaXRlUmVjdC55O1xuXHRcdHRoaXMudGlsZXNbdGhpcy5pbmRleCo0ICsgMl0gPSBzcHJpdGVSZWN0LndpZHRoO1xuXHRcdHRoaXMudGlsZXNbdGhpcy5pbmRleCo0ICsgM10gPSBzcHJpdGVSZWN0LmhlaWdodDtcblxuXHRcdHRoaXMubWluSW5kZXggPSBNYXRoLm1pbih0aGlzLm1pbkluZGV4LCB0aGlzLmluZGV4KTtcblx0XHR0aGlzLm1heEluZGV4ID0gTWF0aC5tYXgodGhpcy5tYXhJbmRleCwgdGhpcy5pbmRleCk7XG5cdFx0dmFyIG1hcmtlciA9IHRoaXMubWFya2Vyc1t0aGlzLmluZGV4XSB8fCB0aGlzLl9jcmVhdGVNYXJrZXIodGhpcy5pbmRleCk7XG5cdFx0dGhpcy5pbmRleCsrO1xuXHRcdHJldHVybiBtYXJrZXI7XG5cdH07XG5cblx0UG9pbnRSZW5kZXJlci5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24obWFya2VyKSB7XG5cdFx0dmFyIGFycmF5SW5kZXggPSBtYXJrZXIuaW5kZXggKiAzO1xuXHRcdHRoaXMucG9zaXRpb25zW2FycmF5SW5kZXggKyAwXSA9IFNUQVJUX1ZBTFVFO1xuXHRcdHRoaXMucG9zaXRpb25zW2FycmF5SW5kZXggKyAxXSA9IFNUQVJUX1ZBTFVFO1xuXHRcdHRoaXMucG9zaXRpb25zW2FycmF5SW5kZXggKyAyXSA9IFNUQVJUX1ZBTFVFO1xuXG5cdFx0dGhpcy5taW5JbmRleCA9IE1hdGgubWluKHRoaXMubWluSW5kZXgsIG1hcmtlci5pbmRleCk7XG5cdFx0dGhpcy5tYXhJbmRleCA9IE1hdGgubWF4KHRoaXMubWF4SW5kZXgsIG1hcmtlci5pbmRleCk7XG5cblx0XHRpZih0aGlzLmluZGV4ID4gbWFya2VyLmluZGV4KSB0aGlzLmluZGV4ID0gbWFya2VyLmluZGV4O1xuXHR9O1xuXG5cdFBvaW50UmVuZGVyZXIucHJvdG90eXBlLmRyYXcgPSBmdW5jdGlvbigpIHtcblx0XHQvLyBvbmx5IHVwZGF0ZSBwb3NpdGlvbnMgdGhhdCBjaGFuZ2VkIGJ5IHBhc3NpbmcgYSByYW5nZVxuXHRcdHRoaXMubWluSW5kZXggPSAodGhpcy5taW5JbmRleCA9PSBNQVhfQ09VTlQpID8gMCA6IHRoaXMubWluSW5kZXg7XG5cdFx0dmFyIG5lZWRzVXBkYXRlID0gdGhpcy5tYXhJbmRleCAhPSB0aGlzLm1pbkluZGV4O1xuXG5cdFx0dGhpcy5wb3NpdGlvbnNBdHRyaWJ1dGUudXBkYXRlUmFuZ2Uub2Zmc2V0ID0gdGhpcy5taW5JbmRleCozO1xuXHRcdHRoaXMucG9zaXRpb25zQXR0cmlidXRlLnVwZGF0ZVJhbmdlLmNvdW50ID0gKHRoaXMubWF4SW5kZXgqMyszKS0odGhpcy5taW5JbmRleCozKTtcblx0XHR0aGlzLnBvc2l0aW9uc0F0dHJpYnV0ZS5uZWVkc1VwZGF0ZSA9IG5lZWRzVXBkYXRlO1xuXG5cdFx0dGhpcy5jb2xvcnNBdHRyaWJ1dGUudXBkYXRlUmFuZ2Uub2Zmc2V0ID0gdGhpcy5taW5JbmRleCozO1xuXHRcdHRoaXMuY29sb3JzQXR0cmlidXRlLnVwZGF0ZVJhbmdlLmNvdW50ID0gKHRoaXMubWF4SW5kZXgqMyszKS0odGhpcy5taW5JbmRleCozKTtcblx0XHR0aGlzLmNvbG9yc0F0dHJpYnV0ZS5uZWVkc1VwZGF0ZSA9IG5lZWRzVXBkYXRlO1xuXG5cdFx0dGhpcy50aWxlc0F0dHJpYnV0ZS51cGRhdGVSYW5nZS5vZmZzZXQgPSB0aGlzLm1pbkluZGV4KjQ7XG5cdFx0dGhpcy50aWxlc0F0dHJpYnV0ZS51cGRhdGVSYW5nZS5jb3VudCA9ICh0aGlzLm1heEluZGV4KjQrNCktKHRoaXMubWluSW5kZXgqNCk7XG5cdFx0dGhpcy50aWxlc0F0dHJpYnV0ZS5uZWVkc1VwZGF0ZSA9IG5lZWRzVXBkYXRlO1xuXG5cdFx0aWYobmVlZHNVcGRhdGUpIHtcblx0XHRcdHRoaXMuZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nQm94KCk7XG5cdFx0XHR0aGlzLmdlb21ldHJ5LmNvbXB1dGVCb3VuZGluZ1NwaGVyZSgpO1xuXHRcdH1cblxuXHRcdHRoaXMubWluSW5kZXggPSBNQVhfQ09VTlQ7XG5cdFx0dGhpcy5tYXhJbmRleCA9IDA7XG5cdH07XG5cblx0UG9pbnRSZW5kZXJlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oZXZlbnQpIHtcblx0XHR0aGlzLm1vdXNlLnggPSAoZXZlbnQuY2xpZW50WCAvIHRoaXMud2ViR2xWaWV3LndpZHRoKSAqIDIgLSAxO1xuXHRcdHRoaXMubW91c2UueSA9IC0oZXZlbnQuY2xpZW50WSAvIHRoaXMud2ViR2xWaWV3LmhlaWdodCkgKiAyICsgMTtcblxuXHRcdC8vIGNoZWNrIGlmIHdlIGhpdCBhbnkgb2YgdGhlIHBvaW50cyBpbiB0aGUgcGFydGljbGUgc3lzdGVtXG5cdFx0dGhpcy5yYXljYXN0ZXIucGFyYW1zLlBvaW50cy50aHJlc2hvbGQgPSAxNioxL01hdGgucG93KDIsIHRoaXMud2ViR2xWaWV3LnNjYWxlKTtcblx0XHR0aGlzLnJheWNhc3Rlci5zZXRGcm9tQ2FtZXJhKHRoaXMubW91c2UsIHRoaXMud2ViR2xWaWV3LmNhbWVyYSk7XG5cdFx0dmFyIGludGVyc2VjdGlvbnMgPSB0aGlzLnJheWNhc3Rlci5pbnRlcnNlY3RPYmplY3RzKHRoaXMucmF5Y2FzdE9iamVjdHMpO1xuXHRcdGludGVyc2VjdGlvbiA9IChpbnRlcnNlY3Rpb25zLmxlbmd0aCkgPiAwID8gaW50ZXJzZWN0aW9uc1swXSA6IG51bGw7XG5cblx0XHQvLyB3ZSBoaXQgc29tZXRoaW5nXG5cdFx0aWYoaW50ZXJzZWN0aW9uKSB7XG5cdFx0XHQvLyBmaXJzdCB0aW1lIHRvIGhvdmVyIHNvbWV0aGluZ1xuXHRcdFx0aWYodGhpcy5ob3ZlcmVkTWFya2VyID09PSBudWxsKSB7XG5cdFx0XHRcdHRoaXMuaG92ZXJlZE1hcmtlciA9IHRoaXMubWFya2Vyc1tpbnRlcnNlY3Rpb24uaW5kZXhdO1xuXHRcdFx0XHR0aGlzLmhvdmVyZWRNYXJrZXIuZGlzcGF0Y2hFdmVudCh7dHlwZTogJ21vdXNlb3Zlcid9KTtcblx0XHRcdH1cblx0XHRcdC8vIHdlJ3JlIGFscmVhZHkgaG92ZXJpbmcgc29tZXRoaW5nIHRoZW4gc29tZXRoaW5nIGdvdCBpbiB0aGUgd2F5XG5cdFx0XHRlbHNlIGlmKHRoaXMuaG92ZXJlZE1hcmtlci5pbmRleCAhPSBpbnRlcnNlY3Rpb24uaW5kZXgpIHtcblx0XHRcdFx0dGhpcy5ob3ZlcmVkTWFya2VyLmRpc3BhdGNoRXZlbnQoe3R5cGU6ICdtb3VzZW91dCd9KTtcblx0XHRcdFx0dGhpcy5ob3ZlcmVkTWFya2VyID0gdGhpcy5tYXJrZXJzW2ludGVyc2VjdGlvbi5pbmRleF07XG5cdFx0XHRcdHRoaXMuaG92ZXJlZE1hcmtlci5kaXNwYXRjaEV2ZW50KHt0eXBlOiAnbW91c2VvdmVyJ30pO1xuXHRcdFx0fVxuXHRcdH1cblx0XHQvLyB0aGVyZSdzIG5vdGhpbmcgdW5kZXIgdGhlIG1vdXNlXG5cdFx0ZWxzZSB7XG5cdFx0XHQvLyB3ZSBsb3N0IG91ciBvYmplY3QuIGJ5ZSBieWVcblx0XHRcdGlmKHRoaXMuaG92ZXJlZE1hcmtlciAhPT0gbnVsbCkge1xuXHRcdFx0XHR0aGlzLmhvdmVyZWRNYXJrZXIuZGlzcGF0Y2hFdmVudCh7dHlwZTogJ21vdXNlb3V0J30pO1xuXHRcdFx0XHR0aGlzLmhvdmVyZWRNYXJrZXIgPSBudWxsO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblxuXHR3aW5kb3cuUG9pbnRSZW5kZXJlciA9IFBvaW50UmVuZGVyZXI7XG59KCkpOyIsIihmdW5jdGlvbigpe1xuXHR2YXIgUG9seWdvblJlbmRlcmVyID0gZnVuY3Rpb24oKSB7fTtcblxuXHRQb2x5Z29uUmVuZGVyZXIucHJvdG90eXBlID0gbmV3IE9iamVjdFJlbmRlcmVyKCk7XG5cdFBvbHlnb25SZW5kZXJlci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBPYmplY3RSZW5kZXJlcjtcblxuXHRQb2x5Z29uUmVuZGVyZXIucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcblx0XHRvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblx0XHR2YXIgZmVhdHVyZXMgPSBvcHRpb25zLmZlYXR1cmVzIHx8IFtdO1xuXHRcdHZhciBmaWxsQ29sb3IgPSAob3B0aW9ucy5maWxsQ29sb3IgIT09IG51bGwgJiYgb3B0aW9ucy5maWxsQ29sb3IgIT09IHVuZGVmaW5lZCkgPyBvcHRpb25zLmZpbGxDb2xvciA6IDB4MDAwMEZGO1xuXHRcdHZhciBzdHJva2VDb2xvciA9IChvcHRpb25zLnN0cm9rZUNvbG9yICE9PSBudWxsICYmIG9wdGlvbnMuc3Ryb2tlQ29sb3IgIT09IHVuZGVmaW5lZCkgPyBvcHRpb25zLnN0cm9rZUNvbG9yIDogMHhGRkZGRkY7XG5cblx0XHRpZihmZWF0dXJlcyA9PT0gbnVsbCB8fCBmZWF0dXJlcy5sZW5ndGggPT09IDApXG5cdFx0XHRyZXR1cm4gbnVsbDtcblxuXHRcdHZhciBnZW9tZXRyeSA9IG5ldyBUSFJFRS5HZW9tZXRyeSgpO1xuXHRcdHZhciBvdXRsaW5lID0gbmV3IFRIUkVFLkdlb21ldHJ5KCk7XG5cdFx0dmFyIHZlcnRleE9mZnNldCA9IGdlb21ldHJ5LnZlcnRpY2VzLmxlbmd0aDtcblx0XHR2YXIgbnVtUG9seWdvbnMgPSAwO1xuXG5cdFx0Zm9yKHZhciBpPTA7IGk8ZmVhdHVyZXMubGVuZ3RoOyBpKyspe1xuXHRcdFx0dmFyIGZlYXR1cmUgPSBmZWF0dXJlc1tpXTtcblx0XHRcdGlmKGZlYXR1cmUubGVuZ3RoID09PSAwKSBjb250aW51ZTtcblxuXHRcdFx0Ly8gaXRlcmF0ZSBldmVyeSBmZWF0dXJlIHdoaWNoIHNob3VsZCBjb250YWluIGEgbGlzdCBvZiBcblx0XHRcdC8vIFthcnJheSBvZiBwb2x5Z29ucyBbb3V0ZXIgbG9vcF0sIFtpbm5lciBsb29wIDFdLCAuLi4sIFtpbm5lciBsb29wIG5dXVxuXHRcdFx0Zm9yKHZhciBqPTA7IGo8ZmVhdHVyZS5sZW5ndGg7IGorKyl7XG5cdFx0XHRcdHZhciBwb2x5Z29uICA9IGZlYXR1cmVbal07XG5cdFx0XHRcdGZvcih2YXIgcD0wOyBwPHBvbHlnb24ubGVuZ3RoOyBwKyspIHtcblx0XHRcdFx0XHR2YXIgbG9vcCA9IHBvbHlnb25bcF07XG5cdFx0XHRcdFx0dmFyIHBvaW50cyA9IFtdLCBob2xlSW5kaWNlcyA9IFtdLCBob2xlSW5kZXggPSAwO1xuXG5cdFx0XHRcdFx0Zm9yKHZhciBsPTA7IGw8bG9vcC5sZW5ndGg7IGwrKykge1xuXHRcdFx0XHRcdFx0dmFyIGNvb3JkaW5hdGUgPSBsb29wW2xdO1xuXHRcdFx0XHRcdFx0dmFyIHBvaW50ID0ge3g6IGNvb3JkaW5hdGVbMF0sIHk6IGNvb3JkaW5hdGVbMV19O1xuXHRcdFx0XHRcdFx0cG9pbnRzLnB1c2gocG9pbnQueCk7XG5cdFx0XHRcdFx0XHRwb2ludHMucHVzaChwb2ludC55KTtcblxuXHRcdFx0XHRcdFx0dmFyIHZlcnRleCA9IG5ldyBUSFJFRS5WZWN0b3IzKHBvaW50LngsIHBvaW50LnksIDEwMDEpO1xuXHRcdFx0XHRcdFx0Z2VvbWV0cnkudmVydGljZXMucHVzaCh2ZXJ0ZXgpO1xuXG5cdFx0XHRcdFx0XHR2YXIgdmVydGV4MSA9IG5ldyBUSFJFRS5WZWN0b3IzKHBvaW50LngsIHBvaW50LnksIDEpO1xuXHRcdFx0XHRcdFx0b3V0bGluZS52ZXJ0aWNlcy5wdXNoKHZlcnRleDEpO1xuXG5cdFx0XHRcdFx0XHR2YXIgY29vcmQwLCBwb2ludDAsIHZlcnRleDA7XG5cdFx0XHRcdFx0XHRpZihsID09IGxvb3AubGVuZ3RoLTEpIHtcblx0XHRcdFx0XHRcdFx0Y29vcmQwID0gbG9vcFswXTtcblx0XHRcdFx0XHRcdFx0cG9pbnQwID0ge3g6IGNvb3JkMFswXSwgeTogY29vcmQwWzFdfTtcblx0XHRcdFx0XHRcdFx0dmVydGV4MCA9IG5ldyBUSFJFRS5WZWN0b3IzKHBvaW50MC54LCBwb2ludDAueSwgMSk7XG5cdFx0XHRcdFx0XHRcdG91dGxpbmUudmVydGljZXMucHVzaCh2ZXJ0ZXgwKTtcblx0XHRcdFx0XHRcdH1lbHNle1xuXHRcdFx0XHRcdFx0XHRjb29yZDAgPSBsb29wW2wrMV07XG5cdFx0XHRcdFx0XHRcdHBvaW50MCA9IHt4OiBjb29yZDBbMF0sIHk6IGNvb3JkMFsxXX07XG5cdFx0XHRcdFx0XHRcdHZlcnRleDAgPSBuZXcgVEhSRUUuVmVjdG9yMyhwb2ludDAueCwgcG9pbnQwLnksIDEpO1xuXHRcdFx0XHRcdFx0XHRvdXRsaW5lLnZlcnRpY2VzLnB1c2godmVydGV4MCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYocD4wKSBob2xlSW5kaWNlcy5wdXNoKGhvbGVJbmRleCk7XG5cdFx0XHRcdFx0aG9sZUluZGV4ICs9IGxvb3AubGVuZ3RoO1xuXG5cdFx0XHRcdFx0dmFyIHRyaXMgPSBlYXJjdXQocG9pbnRzLCBudWxsLCAyKTtcblx0XHRcdFx0XHRmb3IodmFyIGs9MDsgazx0cmlzLmxlbmd0aDsgays9Mykge1xuXHRcdFx0XHRcdFx0Ly8gMi0xLTAgbWVhbnMgZmFjZSB1cFxuXHRcdFx0XHRcdFx0dmFyIGZhY2UgPSBuZXcgVEhSRUUuRmFjZTMoXG5cdFx0XHRcdFx0XHRcdHRyaXNbaysyXSArIHZlcnRleE9mZnNldCwgXG5cdFx0XHRcdFx0XHRcdHRyaXNbaysxXSArIHZlcnRleE9mZnNldCwgXG5cdFx0XHRcdFx0XHRcdHRyaXNbayswXSArIHZlcnRleE9mZnNldFxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdGdlb21ldHJ5LmZhY2VzLnB1c2goZmFjZSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHZlcnRleE9mZnNldCA9IGdlb21ldHJ5LnZlcnRpY2VzLmxlbmd0aDtcblx0XHRcdFx0XHRudW1Qb2x5Z29ucysrO1xuXHRcdFx0XHR9XHRcblx0XHRcdH1cblx0XHR9XG5cblx0XHR2YXIgY292ZXJhZ2VQb2x5Z29uID0gbmV3IFRIUkVFLk1lc2goZ2VvbWV0cnksIG5ldyBUSFJFRS5NZXNoQmFzaWNNYXRlcmlhbCh7XG5cdFx0XHRjb2xvcjogZmlsbENvbG9yLFxuXHRcdFx0b3BhY2l0eTogMC4yNSwgXG5cdFx0XHR0cmFuc3BhcmVudDogdHJ1ZSxcblx0XHRcdGRlcHRoV3JpdGU6IGZhbHNlLFxuXHRcdFx0ZGVwdGhUZXN0OiBmYWxzZVxuXHRcdH0pKTtcblxuXHRcdHZhciBvdXRsaW5lUG9seWdvbiA9IG5ldyBUSFJFRS5MaW5lU2VnbWVudHMob3V0bGluZSwgbmV3IFRIUkVFLkxpbmVCYXNpY01hdGVyaWFsKHtcblx0XHRcdGNvbG9yOiBzdHJva2VDb2xvcixcblx0XHRcdGxpbmV3aWR0aDogMixcblx0XHRcdG9wYWNpdHk6IDAuMjUsIFxuXHRcdFx0dHJhbnNwYXJlbnQ6IHRydWUsXG5cdFx0XHRkZXB0aFdyaXRlOiBmYWxzZSxcblx0XHRcdGRlcHRoVGVzdDogZmFsc2Vcblx0XHR9KSk7XG5cblx0XHRyZXR1cm4ge3NoYXBlOiBjb3ZlcmFnZVBvbHlnb24sIG91dGxpbmU6IG91dGxpbmVQb2x5Z29ufTtcblx0fTtcblxuXHR3aW5kb3cuUG9seWdvblJlbmRlcmVyID0gUG9seWdvblJlbmRlcmVyO1xufSgpKTsiLCIoZnVuY3Rpb24oKXtcblx0dmFyIHZzaGFkZXIgPSAoZnVuY3Rpb24gKCkgey8qXG5cdFx0YXR0cmlidXRlIHZlYzQgdGlsZTtcblx0XHR2YXJ5aW5nIHZlYzIgdlV2O1xuXHRcdHZhcnlpbmcgdmVjNCB2VGlsZTtcblx0XHR2b2lkIG1haW4oKSB7XG5cdFx0XHR2ZWM0IG12UG9zaXRpb24gPSBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KHBvc2l0aW9uLCAxLjApO1xuXHRcdFx0Z2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbXZQb3NpdGlvbjtcblx0XHRcdHZVdiA9IHV2O1xuXHRcdFx0dlRpbGUgPSB0aWxlO1xuXHRcdH1cblx0Ki99KS50b1N0cmluZygpLm1hdGNoKC9bXl0qXFwvXFwqKFteXSopXFwqXFwvXFx9JC8pWzFdO1xuXG5cdHZhciBmc2hhZGVyID0gKGZ1bmN0aW9uICgpIHsvKlxuXHRcdHVuaWZvcm0gc2FtcGxlcjJEIHRleDE7XG5cdFx0dW5pZm9ybSBmbG9hdCBhbHBoYTtcblx0XHR2YXJ5aW5nIHZlYzIgdlV2O1xuXHRcdHZhcnlpbmcgdmVjNCB2VGlsZTtcblx0XHR2b2lkIG1haW4oKSB7XG5cdFx0XHR2ZWMyIHV2ID0gdlRpbGUueHkgKyB2VGlsZS56dyAqIHZVdjtcblx0XHRcdGdsX0ZyYWdDb2xvciA9IHRleHR1cmUyRCh0ZXgxLCB1dikgKiB2ZWM0KDEsIDEsIDEsIGFscGhhKTtcblx0XHR9XG5cdCovfSkudG9TdHJpbmcoKS5tYXRjaCgvW15dKlxcL1xcKihbXl0qKVxcKlxcL1xcfSQvKVsxXTtcblxuXHR2YXIgTUFYX0NPVU5UID0gTWF0aC5wb3coMiwzMikgLSAxO1xuXHR2YXIgU1RBUlRfVkFMVUUgPSAtOTk5OTkuMDtcblxuXHR2YXIgUE9TSVRJT05fSU5URVJWQUwgPSAzKjQ7IC8vIDMgZGltZW5zaW9ucyBwZXIgdmVydGV4LCA0IHZlcnRleCBwZXIgc3ByaXRlXG5cdHZhciBJTkRFWF9JTlRFUlZBTCA9IDMqMjsgLy8gMyBpbmRleCBwZXIgdHJpLCAyIHRyaSBwZXIgc3ByaXRlXG5cdHZhciBVVl9JTlRFUlZBTCA9IDIqNDsgLy8gMiB1diBwZXIgdmVydGV4LCA0IHZlcnRleCBwZXIgc3ByaXRlXG5cdHZhciBUSUxFX0lOVEVSVkFMID0gNCo0OyAvLyBvZmZzZXQoeCx5KSArIHNpemUod2lkdGgsIGhlaWd0KSBwZXIgdmVydGV4LCA0IHZlcnRleCBwZXIgc3ByaXRlXG5cblx0dmFyIFNwcml0ZVJlbmRlcmVyID0gZnVuY3Rpb24oKXtcblx0XHR0aGlzLm1pbkluZGV4ID0gTUFYX0NPVU5UO1xuXHRcdHRoaXMubWF4SW5kZXggPSAwO1xuXHRcdHRoaXMuaW5kZXggPSAwO1xuXHRcdHRoaXMuc3ByaXRlcyA9IFtdO1xuXHRcdHRoaXMub3BhY2l0eSA9IDAuODtcblx0fTtcblxuXHRTcHJpdGVSZW5kZXJlci5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uKCkge1xuXHRcdHRoaXMucG9zaXRpb25zID0gbmV3IEZsb2F0MzJBcnJheSgxMDI0KlBPU0lUSU9OX0lOVEVSVkFMKTsgXG5cdFx0dGhpcy5wb3NpdGlvbnMuZmlsbChTVEFSVF9WQUxVRSk7XG5cdFx0dGhpcy5wb3NpdGlvbnNBdHRyaWJ1dGUgPSBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKHRoaXMucG9zaXRpb25zLCAzKTtcblx0XHR0aGlzLnBvc2l0aW9uc0F0dHJpYnV0ZS5zZXREeW5hbWljKHRydWUpO1xuXG5cdFx0dGhpcy5pbmRpY2VzID0gbmV3IFVpbnQxNkFycmF5KDEwMjQqSU5ERVhfSU5URVJWQUwpOyBcblx0XHR0aGlzLmluZGljZXNBdHRyaWJ1dGUgPSBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKHRoaXMuaW5kaWNlcywgMSk7XG5cdFx0dGhpcy5pbmRpY2VzQXR0cmlidXRlLnNldER5bmFtaWModHJ1ZSk7XG5cblx0XHR0aGlzLnV2ID0gbmV3IEZsb2F0MzJBcnJheSgxMDI0KlVWX0lOVEVSVkFMKTsgXG5cdFx0dGhpcy51dkF0dHJpYnV0ZSA9IG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUodGhpcy51diwgMik7IFxuXHRcdHRoaXMudXZBdHRyaWJ1dGUuc2V0RHluYW1pYyh0cnVlKTtcblxuXHRcdHRoaXMudGlsZXMgPSBuZXcgRmxvYXQzMkFycmF5KDEwMjQqVElMRV9JTlRFUlZBTCk7IFxuXHRcdHRoaXMudGlsZXNBdHRyaWJ1dGUgPSBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKHRoaXMudGlsZXMsIDQpOyBcblx0XHR0aGlzLnRpbGVzQXR0cmlidXRlLnNldER5bmFtaWModHJ1ZSk7XG5cblx0XHR0aGlzLmdlb21ldHJ5ID0gbmV3IFRIUkVFLkJ1ZmZlckdlb21ldHJ5KCk7XG5cdFx0dGhpcy5nZW9tZXRyeS5zZXRJbmRleCh0aGlzLmluZGljZXNBdHRyaWJ1dGUpO1xuXHRcdHRoaXMuZ2VvbWV0cnkuYWRkQXR0cmlidXRlKCdwb3NpdGlvbicsIHRoaXMucG9zaXRpb25zQXR0cmlidXRlKTtcblx0XHR0aGlzLmdlb21ldHJ5LmFkZEF0dHJpYnV0ZSgndXYnLCB0aGlzLnV2QXR0cmlidXRlKTtcblx0XHR0aGlzLmdlb21ldHJ5LmFkZEF0dHJpYnV0ZSgndGlsZScsIHRoaXMudGlsZXNBdHRyaWJ1dGUpO1xuXG5cdFx0dGhpcy5zcHJpdGVTaGVldCA9IG5ldyBEeW5hbWljU3ByaXRlU2hlZXQoNDA5NiwgNDA5Nik7XG5cdFx0dGhpcy5tYXRlcmlhbCA9IG5ldyBUSFJFRS5TaGFkZXJNYXRlcmlhbCgge1xuXHRcdFx0dW5pZm9ybXM6IHtcblx0XHRcdFx0dGV4MTogeyB0eXBlOiBcInRcIiwgdmFsdWU6IHRoaXMuc3ByaXRlU2hlZXQudGV4dHVyZSB9LFxuXHRcdFx0XHRhbHBoYTogeyB0eXBlOiBcImZcIiwgdmFsdWU6IHRoaXMub3BhY2l0eSB9XG5cdFx0XHR9LFxuXHRcdFx0dmVydGV4U2hhZGVyOiB2c2hhZGVyLFxuXHRcdFx0ZnJhZ21lbnRTaGFkZXI6IGZzaGFkZXJcblx0XHR9KTtcblxuXHRcdHRoaXMuc2NlbmVPYmplY3QgPSBuZXcgVEhSRUUuTWVzaCh0aGlzLmdlb21ldHJ5LCB0aGlzLm1hdGVyaWFsKTtcblxuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdFNwcml0ZVJlbmRlcmVyLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbihvcHRpb25zKSB7XG5cdFx0dmFyIHBvc2l0aW9uSW5kZXggPSB0aGlzLmluZGV4KlBPU0lUSU9OX0lOVEVSVkFMO1xuXHRcdHdoaWxlKHBvc2l0aW9uSW5kZXggPCB0aGlzLnBvc2l0aW9ucy5sZW5ndGggJiYgdGhpcy5wb3NpdGlvbnNbcG9zaXRpb25JbmRleF0gIT09IFNUQVJUX1ZBTFVFKVxuXHRcdFx0cG9zaXRpb25JbmRleCA9ICsrdGhpcy5pbmRleCpQT1NJVElPTl9JTlRFUlZBTDtcblxuXHRcdGlmKHBvc2l0aW9uSW5kZXggPj0gdGhpcy5wb3NpdGlvbnMubGVuZ3RoKXtcblx0XHRcdC8vIVRPRE86IEV4cGFuZCBwb2ludHMgYnVmZmVyXG5cdFx0XHRjb25zb2xlLmxvZyhcIltTcHJpdGVSZW5kZXJlcl0gUnVuIG91dCBvZiBwb2ludHMhISFcIik7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIGltYWdlID0gb3B0aW9ucy5pbWFnZTtcblx0XHR2YXIgaW1hZ2VOYW1lID0gb3B0aW9ucy5pbWFnZU5hbWU7XG5cdFx0dmFyIHNwcml0ZSA9IHRoaXMuc3ByaXRlU2hlZXQuZ2V0KGltYWdlTmFtZSk7XG5cdFx0aWYoIXNwcml0ZSkge1xuXHRcdFx0c3ByaXRlID0gdGhpcy5zcHJpdGVTaGVldC5hZGQoaW1hZ2VOYW1lLCBpbWFnZSk7XG5cdFx0XHRpZighc3ByaXRlKSB7XG5cdFx0XHRcdC8vIVRPRE86IENyZWF0ZSBhIG5ldyBzcHJpdGUgc2hlZXQgaWYgdGhpcyBvbmUgZ2V0cyBmdWxsXG5cdFx0XHRcdGNvbnNvbGUubG9nKFwiW1Nwcml0ZVJlbmRlcmVyXSBTcHJpdGVTaGVldCBhbHJlYWR5IGZ1bGwuXCIpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXHRcdG9wdGlvbnMucG9zaXRpb24gPSBvcHRpb25zLnBvc2l0aW9uIHx8IHt4OjAsIHk6MCwgejowfTtcblx0XHRvcHRpb25zLndpZHRoID0gb3B0aW9ucy53aWR0aCB8fCAyNTY7XG5cdFx0b3B0aW9ucy5oZWlnaHQgPSBvcHRpb25zLmhlaWdodCB8fCAyNTY7XG5cdFx0b3B0aW9ucy5pbWFnZU5hbWUgPSBvcHRpb25zLmljb24gfHwgXCJyZWQtZG90XCI7XG5cblx0XHR0aGlzLnBvc2l0aW9uc1twb3NpdGlvbkluZGV4ICsgMF0gPSBvcHRpb25zLnBvc2l0aW9uLng7XG5cdFx0dGhpcy5wb3NpdGlvbnNbcG9zaXRpb25JbmRleCArIDFdID0gb3B0aW9ucy5wb3NpdGlvbi55O1xuXHRcdHRoaXMucG9zaXRpb25zW3Bvc2l0aW9uSW5kZXggKyAyXSA9IG9wdGlvbnMucG9zaXRpb24uejtcblx0XHR0aGlzLnBvc2l0aW9uc1twb3NpdGlvbkluZGV4ICsgM10gPSBvcHRpb25zLnBvc2l0aW9uLnggKyBvcHRpb25zLndpZHRoO1xuXHRcdHRoaXMucG9zaXRpb25zW3Bvc2l0aW9uSW5kZXggKyA0XSA9IG9wdGlvbnMucG9zaXRpb24ueTtcblx0XHR0aGlzLnBvc2l0aW9uc1twb3NpdGlvbkluZGV4ICsgNV0gPSBvcHRpb25zLnBvc2l0aW9uLno7XG5cdFx0dGhpcy5wb3NpdGlvbnNbcG9zaXRpb25JbmRleCArIDZdID0gb3B0aW9ucy5wb3NpdGlvbi54O1xuXHRcdHRoaXMucG9zaXRpb25zW3Bvc2l0aW9uSW5kZXggKyA3XSA9IG9wdGlvbnMucG9zaXRpb24ueSArIG9wdGlvbnMuaGVpZ2h0O1xuXHRcdHRoaXMucG9zaXRpb25zW3Bvc2l0aW9uSW5kZXggKyA4XSA9IG9wdGlvbnMucG9zaXRpb24uejtcblx0XHR0aGlzLnBvc2l0aW9uc1twb3NpdGlvbkluZGV4ICsgOV0gPSBvcHRpb25zLnBvc2l0aW9uLnggKyBvcHRpb25zLndpZHRoO1xuXHRcdHRoaXMucG9zaXRpb25zW3Bvc2l0aW9uSW5kZXggKzEwXSA9IG9wdGlvbnMucG9zaXRpb24ueSArIG9wdGlvbnMuaGVpZ2h0O1xuXHRcdHRoaXMucG9zaXRpb25zW3Bvc2l0aW9uSW5kZXggKzExXSA9IG9wdGlvbnMucG9zaXRpb24uejtcblxuXHRcdHZhciBhcnJheUluZGV4ID0gdGhpcy5pbmRleCpJTkRFWF9JTlRFUlZBTDtcblx0XHR0aGlzLmluZGljZXNbYXJyYXlJbmRleCArIDBdID0gdGhpcy5pbmRleCo0ICsgMDtcblx0XHR0aGlzLmluZGljZXNbYXJyYXlJbmRleCArIDFdID0gdGhpcy5pbmRleCo0ICsgMjtcblx0XHR0aGlzLmluZGljZXNbYXJyYXlJbmRleCArIDJdID0gdGhpcy5pbmRleCo0ICsgMTtcblx0XHR0aGlzLmluZGljZXNbYXJyYXlJbmRleCArIDNdID0gdGhpcy5pbmRleCo0ICsgMTtcblx0XHR0aGlzLmluZGljZXNbYXJyYXlJbmRleCArIDRdID0gdGhpcy5pbmRleCo0ICsgMjtcblx0XHR0aGlzLmluZGljZXNbYXJyYXlJbmRleCArIDVdID0gdGhpcy5pbmRleCo0ICsgMztcblxuXHRcdHZhciB1dkluZGV4ID0gdGhpcy5pbmRleCpVVl9JTlRFUlZBTDtcblx0XHR0aGlzLnV2W3V2SW5kZXggKyAwXSA9IDA7XG5cdFx0dGhpcy51dlt1dkluZGV4ICsgMV0gPSAwO1xuXHRcdHRoaXMudXZbdXZJbmRleCArIDJdID0gMTtcblx0XHR0aGlzLnV2W3V2SW5kZXggKyAzXSA9IDA7XG5cdFx0dGhpcy51dlt1dkluZGV4ICsgNF0gPSAwO1xuXHRcdHRoaXMudXZbdXZJbmRleCArIDVdID0gMTtcblx0XHR0aGlzLnV2W3V2SW5kZXggKyA2XSA9IDE7XG5cdFx0dGhpcy51dlt1dkluZGV4ICsgN10gPSAxO1xuXG5cdFx0dmFyIHQgPSB0aGlzLmluZGV4KlRJTEVfSU5URVJWQUw7XG5cdFx0dGhpcy50aWxlc1t0KzBdID0gdGhpcy50aWxlc1t0KzRdID0gdGhpcy50aWxlc1t0KzhdID0gdGhpcy50aWxlc1t0KzEyXSA9IHNwcml0ZS5ub3JtYWxSZWN0Lng7XG5cdFx0dGhpcy50aWxlc1t0KzFdID0gdGhpcy50aWxlc1t0KzVdID0gdGhpcy50aWxlc1t0KzldID0gdGhpcy50aWxlc1t0KzEzXSA9IHNwcml0ZS5ub3JtYWxSZWN0Lnk7XG5cdFx0dGhpcy50aWxlc1t0KzJdID0gdGhpcy50aWxlc1t0KzZdID0gdGhpcy50aWxlc1t0KzEwXSA9IHRoaXMudGlsZXNbdCsxNF0gPSBzcHJpdGUubm9ybWFsUmVjdC53aWR0aDtcblx0XHR0aGlzLnRpbGVzW3QrM10gPSB0aGlzLnRpbGVzW3QrN10gPSB0aGlzLnRpbGVzW3QrMTFdID0gdGhpcy50aWxlc1t0KzE1XSA9IHNwcml0ZS5ub3JtYWxSZWN0LmhlaWdodDtcblxuXHRcdHRoaXMubWluSW5kZXggPSBNYXRoLm1pbih0aGlzLm1pbkluZGV4LCB0aGlzLmluZGV4KTtcblx0XHR0aGlzLm1heEluZGV4ID0gTWF0aC5tYXgodGhpcy5tYXhJbmRleCwgdGhpcy5pbmRleCk7XG5cdFx0cmV0dXJuIHtpbmRleDogdGhpcy5pbmRleCsrLCBuYW1lOiBpbWFnZU5hbWV9O1xuXHR9O1xuXG5cdFNwcml0ZVJlbmRlcmVyLnByb3RvdHlwZS5yZW1vdmUgPSBmdW5jdGlvbihzcHJpdGUpIHtcblx0XHR2YXIgcG9zaXRpb25JbmRleCA9IHNwcml0ZS5pbmRleCpQT1NJVElPTl9JTlRFUlZBTDtcblx0XHRmb3IodmFyIGk9MDsgaTxQT1NJVElPTl9JTlRFUlZBTDsgaSsrKSB7XG5cdFx0XHR0aGlzLnBvc2l0aW9uc1twb3NpdGlvbkluZGV4ICsgaV0gPSBTVEFSVF9WQUxVRTtcblx0XHR9XG5cdFx0dGhpcy5zcHJpdGVTaGVldC5yZW1vdmUoc3ByaXRlLm5hbWUpO1xuXG5cdFx0dGhpcy5taW5JbmRleCA9IE1hdGgubWluKHRoaXMubWluSW5kZXgsIHNwcml0ZS5pbmRleCk7XG5cdFx0dGhpcy5tYXhJbmRleCA9IE1hdGgubWF4KHRoaXMubWF4SW5kZXgsIHNwcml0ZS5pbmRleCk7XG5cblx0XHRpZih0aGlzLmluZGV4ID4gc3ByaXRlLmluZGV4KSB0aGlzLmluZGV4ID0gc3ByaXRlLmluZGV4O1xuXHR9O1xuXG5cdFNwcml0ZVJlbmRlcmVyLnByb3RvdHlwZS5kcmF3ID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly8gb25seSB1cGRhdGUgcG9zaXRpb25zIHRoYXQgY2hhbmdlZCBieSBwYXNzaW5nIGEgcmFuZ2Vcblx0XHR0aGlzLm1pbkluZGV4ID0gKHRoaXMubWluSW5kZXggPT0gTUFYX0NPVU5UKSA/IDAgOiB0aGlzLm1pbkluZGV4O1xuXHRcdHZhciBuZWVkc1VwZGF0ZSA9IHRoaXMubWF4SW5kZXggIT0gdGhpcy5taW5JbmRleDtcblxuXHRcdHZhciBwID0gUE9TSVRJT05fSU5URVJWQUw7XG5cdFx0dGhpcy5wb3NpdGlvbnNBdHRyaWJ1dGUudXBkYXRlUmFuZ2Uub2Zmc2V0ID0gdGhpcy5taW5JbmRleCpwO1xuXHRcdHRoaXMucG9zaXRpb25zQXR0cmlidXRlLnVwZGF0ZVJhbmdlLmNvdW50ID0gKHRoaXMubWF4SW5kZXgqcCtwKS0odGhpcy5taW5JbmRleCpwKTtcblx0XHR0aGlzLnBvc2l0aW9uc0F0dHJpYnV0ZS5uZWVkc1VwZGF0ZSA9IG5lZWRzVXBkYXRlO1xuXG5cdFx0dmFyIGkgPSBJTkRFWF9JTlRFUlZBTDtcblx0XHR0aGlzLmluZGljZXNBdHRyaWJ1dGUudXBkYXRlUmFuZ2Uub2Zmc2V0ID0gdGhpcy5taW5JbmRleCppO1xuXHRcdHRoaXMuaW5kaWNlc0F0dHJpYnV0ZS51cGRhdGVSYW5nZS5jb3VudCA9ICh0aGlzLm1heEluZGV4KmkraSktKHRoaXMubWluSW5kZXgqaSk7XG5cdFx0dGhpcy5pbmRpY2VzQXR0cmlidXRlLm5lZWRzVXBkYXRlID0gbmVlZHNVcGRhdGU7XG5cblx0XHR2YXIgdSA9IFVWX0lOVEVSVkFMO1xuXHRcdHRoaXMudXZBdHRyaWJ1dGUudXBkYXRlUmFuZ2Uub2Zmc2V0ID0gdGhpcy5taW5JbmRleCp1O1xuXHRcdHRoaXMudXZBdHRyaWJ1dGUudXBkYXRlUmFuZ2UuY291bnQgPSAodGhpcy5tYXhJbmRleCp1K3UpLSh0aGlzLm1pbkluZGV4KnUpO1xuXHRcdHRoaXMudXZBdHRyaWJ1dGUubmVlZHNVcGRhdGUgPSBuZWVkc1VwZGF0ZTtcblxuXHRcdHZhciB0ID0gVElMRV9JTlRFUlZBTDtcblx0XHR0aGlzLnRpbGVzQXR0cmlidXRlLnVwZGF0ZVJhbmdlLm9mZnNldCA9IHRoaXMubWluSW5kZXgqdDtcblx0XHR0aGlzLnRpbGVzQXR0cmlidXRlLnVwZGF0ZVJhbmdlLmNvdW50ID0gKHRoaXMubWF4SW5kZXgqdCt0KS0odGhpcy5taW5JbmRleCp0KTtcblx0XHR0aGlzLnRpbGVzQXR0cmlidXRlLm5lZWRzVXBkYXRlID0gbmVlZHNVcGRhdGU7XG5cblx0XHRpZihuZWVkc1VwZGF0ZSkge1xuXHRcdFx0dGhpcy5nZW9tZXRyeS5jb21wdXRlQm91bmRpbmdCb3goKTtcblx0XHRcdHRoaXMuZ2VvbWV0cnkuY29tcHV0ZUJvdW5kaW5nU3BoZXJlKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5taW5JbmRleCA9IE1BWF9DT1VOVDtcblx0XHR0aGlzLm1heEluZGV4ID0gMDtcblx0fTtcblxuXHR3aW5kb3cuU3ByaXRlUmVuZGVyZXIgPSBTcHJpdGVSZW5kZXJlcjtcbn0oKSk7XG4iLCIoZnVuY3Rpb24oKXtcblx0dmFyIFNwcml0ZSA9IGZ1bmN0aW9uKGRhdGEpIHtcblx0XHR0aGlzLm5hbWUgPSBkYXRhLm5hbWU7XG5cdFx0dmFyIHggPSBkYXRhLngsXG5cdFx0XHR5ID0gZGF0YS55LFxuXHRcdFx0d2lkdGggPSBkYXRhLndpZHRoLFxuXHRcdFx0aGVpZ2h0ID0gZGF0YS5oZWlnaHQ7XG5cdFx0dGhpcy5yZWN0ID0gbmV3IFJlY3RhbmdsZSh4LCB5LCB3aWR0aCwgaGVpZ2h0KTtcblx0fTtcblxuXHRTcHJpdGUucHJvdG90eXBlLmNvbXB1dGVOb3JtYWwgPSBmdW5jdGlvbihtYXhXaWR0aCwgbWF4SGVpZ2h0KSB7XG5cdFx0dGhpcy5ub3JtYWxSZWN0ID0gdGhpcy5yZWN0LmdldE5vcm1hbGl6ZWRSZWN0KG1heFdpZHRoLCBtYXhIZWlnaHQpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdHZhciBTcHJpdGVTaGVldCA9IGZ1bmN0aW9uKHRleHR1cmUsIHNwcml0ZXMpIHtcblx0XHR0aGlzLnRleHR1cmUgPSB0ZXh0dXJlO1xuXHRcdHRoaXMuc3ByaXRlcyA9IHt9O1xuXG5cdFx0Zm9yKHZhciBpPTA7IGk8c3ByaXRlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dGhpcy5zcHJpdGVzW3Nwcml0ZXNbaV0ubmFtZV0gPSBuZXcgU3ByaXRlKHNwcml0ZXNbaV0pXG5cdFx0XHRcdC5jb21wdXRlTm9ybWFsKHRleHR1cmUuaW1hZ2Uud2lkdGgsIHRleHR1cmUuaW1hZ2UuaGVpZ2h0KTtcblx0XHR9XG5cdH07XG5cblx0U3ByaXRlU2hlZXQucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uKHNwcml0ZU5hbWUpIHtcblx0XHRyZXR1cm4gdGhpcy5zcHJpdGVzW3Nwcml0ZU5hbWVdO1xuXHR9O1xuXG5cdHdpbmRvdy5TcHJpdGVTaGVldCA9IFNwcml0ZVNoZWV0O1xufSgpKTsiLCIoZnVuY3Rpb24oKXtcblx0dmFyIENTU19UUkFOU0ZPUk0gPSAoZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXHRcdHZhciBwcm9wcyA9IFtcblx0XHRcdCd0cmFuc2Zvcm0nLFxuXHRcdFx0J1dlYmtpdFRyYW5zZm9ybScsXG5cdFx0XHQnTW96VHJhbnNmb3JtJyxcblx0XHRcdCdPVHJhbnNmb3JtJyxcblx0XHRcdCdtc1RyYW5zZm9ybSdcblx0XHRdO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBwcm9wID0gcHJvcHNbaV07XG5cdFx0XHRpZiAoZGl2LnN0eWxlW3Byb3BdICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0cmV0dXJuIHByb3A7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBwcm9wc1swXTtcblx0fSkoKTtcblxuXHR2YXIgV2ViR0xWaWV3ID0gZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5jYW1lcmEgPSBuZXcgVEhSRUUuT3J0aG9ncmFwaGljQ2FtZXJhKDAsIDI1NSwgMCwgMjU1LCAtMzAwMCwgMzAwMCk7XG5cdFx0dGhpcy5jYW1lcmEucG9zaXRpb24ueiA9IDEwMDA7XG5cdFx0dGhpcy5zY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpO1xuXHRcdHRoaXMuc2NlbmVNYXNrID0gbmV3IFRIUkVFLlNjZW5lKCk7XG5cdFx0dGhpcy5yZW5kZXJlciA9IG5ldyBUSFJFRS5XZWJHTFJlbmRlcmVyKHtcblx0XHRcdGFscGhhOiB0cnVlLFxuXHRcdFx0YW50aWFsaWFzaW5nOiB0cnVlLFxuXHRcdFx0Y2xlYXJDb2xvcjogMHgwMDAwMDAsXG5cdFx0XHRjbGVhckFscGhhOiAwXG5cblx0XHR9KTtcblx0XHR0aGlzLnJlbmRlcmVyLnNldFBpeGVsUmF0aW8od2luZG93LmRldmljZVBpeGVsUmF0aW8pO1xuXHRcdHRoaXMucmVuZGVyZXIuYXV0b0NsZWFyID0gZmFsc2U7XG5cdFx0dGhpcy5jb250ZXh0ID0gdGhpcy5yZW5kZXJlci5jb250ZXh0O1xuXHRcdHRoaXMuYW5pbWF0aW9uRnJhbWUgPSBudWxsO1xuXHRcdHRoaXMub2JqZWN0UmVuZGVyZXJzID0gW107XG5cdFx0dGhpcy5udW1NYXNrcyA9IDA7XG5cblx0XHR0aGlzLnVwZGF0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG1hcCA9IHRoaXMubWFwO1xuXHRcdFx0dmFyIGJvdW5kcyA9IG1hcC5nZXRCb3VuZHMoKTtcblx0XHRcdHZhciB0b3BMZWZ0ID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZyhcblx0XHRcdFx0Ym91bmRzLmdldE5vcnRoRWFzdCgpLmxhdCgpLFxuXHRcdFx0XHRib3VuZHMuZ2V0U291dGhXZXN0KCkubG5nKClcblx0XHRcdCk7XG5cblx0XHRcdC8vIFRyYW5zbGF0ZSB0aGUgd2ViZ2wgY2FudmFzIGJhc2VkIG9uIG1hcHMncyBib3VuZHNcblx0XHRcdHZhciBjYW52YXMgPSB0aGlzLnJlbmRlcmVyLmRvbUVsZW1lbnQ7XG5cdFx0XHR2YXIgcG9pbnQgPSB0aGlzLmdldFByb2plY3Rpb24oKS5mcm9tTGF0TG5nVG9EaXZQaXhlbCh0b3BMZWZ0KTtcblx0XHRcdGNhbnZhcy5zdHlsZVtDU1NfVFJBTlNGT1JNXSA9ICd0cmFuc2xhdGUoJyArIE1hdGgucm91bmQocG9pbnQueCkgKyAncHgsJyArIE1hdGgucm91bmQocG9pbnQueSkgKyAncHgpJztcblxuXHRcdFx0Ly8gUmVzaXplIHRoZSByZW5kZXJlciAvIGNhbnZhcyBiYXNlZCBvbiBzaXplIG9mIHRoZSBtYXBcblx0XHRcdHZhciBkaXYgPSBtYXAuZ2V0RGl2KCksIFxuXHRcdFx0XHR3aWR0aCA9IGRpdi5jbGllbnRXaWR0aCwgXG5cdFx0XHRcdGhlaWdodCA9IGRpdi5jbGllbnRIZWlnaHQ7XG5cblx0XHRcdGlmICh3aWR0aCAhPT0gdGhpcy53aWR0aCB8fCBoZWlnaHQgIT09IHRoaXMuaGVpZ2h0KXtcblx0XHRcdFx0dGhpcy53aWR0aCA9IHdpZHRoO1xuXHRcdFx0XHR0aGlzLmhlaWdodCA9IGhlaWdodDtcblx0XHRcdFx0dGhpcy5yZW5kZXJlci5zZXRTaXplKHdpZHRoLCBoZWlnaHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBVcGRhdGUgY2FtZXJhIGJhc2VkIG9uIG1hcCB6b29tIGFuZCBwb3NpdGlvblxuXHRcdFx0dmFyIHpvb20gPSBtYXAuZ2V0Wm9vbSgpO1xuXHRcdFx0dmFyIHNjYWxlID0gTWF0aC5wb3coMiwgem9vbSk7XG5cdFx0XHR2YXIgb2Zmc2V0ID0gbWFwLmdldFByb2plY3Rpb24oKS5mcm9tTGF0TG5nVG9Qb2ludCh0b3BMZWZ0KTtcblxuXHRcdFx0dGhpcy5jYW1lcmEucG9zaXRpb24ueCA9IG9mZnNldC54O1xuXHRcdFx0dGhpcy5jYW1lcmEucG9zaXRpb24ueSA9IG9mZnNldC55O1xuXG5cdFx0XHR0aGlzLnNjYWxlID0gem9vbTtcblx0XHRcdHRoaXMuY2FtZXJhLnNjYWxlLnggPSB0aGlzLndpZHRoIC8gMjU2IC8gc2NhbGU7XG5cdFx0XHR0aGlzLmNhbWVyYS5zY2FsZS55ID0gdGhpcy5oZWlnaHQgLyAyNTYgLyBzY2FsZTtcblx0XHR9O1xuXG5cdFx0dGhpcy5kcmF3ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLmFuaW1hdGlvbkZyYW1lKTtcblx0XHRcdHRoaXMuYW5pbWF0aW9uRnJhbWUgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUodGhpcy5kZWZlcnJlZFJlbmRlci5iaW5kKHRoaXMpKTtcblx0XHR9O1xuXG5cdFx0dGhpcy5kZWZlcnJlZFJlbmRlciA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy51cGRhdGUoKTtcblxuXHRcdFx0dmFyIGNvbnRleHQgPSB0aGlzLmNvbnRleHQsIHJlbmRlcmVyID0gdGhpcy5yZW5kZXJlcjtcblx0XHRcdHZhciBtYXNrRW5hYmxlZCA9IHRoaXMubnVtTWFza3MgPiAwO1xuXG5cdFx0XHRpZihtYXNrRW5hYmxlZCkge1xuXHRcdFx0XHRjb250ZXh0LmNvbG9yTWFzayggZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2UgKTtcblx0XHRcdFx0Y29udGV4dC5kZXB0aE1hc2soIGZhbHNlICk7XG5cblx0XHRcdFx0Y29udGV4dC5lbmFibGUoY29udGV4dC5TVEVOQ0lMX1RFU1QpO1xuXHRcdFx0XHRjb250ZXh0LnN0ZW5jaWxPcChjb250ZXh0LlJFUExBQ0UsIGNvbnRleHQuUkVQTEFDRSwgY29udGV4dC5SRVBMQUNFKTtcblx0XHRcdFx0Y29udGV4dC5zdGVuY2lsRnVuYyhjb250ZXh0LkFMV0FZUywgMCwgMHhmZmZmZmZmZik7XG5cdFx0XHRcdGNvbnRleHQuY2xlYXJTdGVuY2lsKDEpO1xuXG5cdFx0XHRcdHRoaXMucmVuZGVyZXIucmVuZGVyKHRoaXMuc2NlbmVNYXNrLCB0aGlzLmNhbWVyYSwgbnVsbCwgdHJ1ZSk7XG5cblx0XHRcdFx0Y29udGV4dC5jb2xvck1hc2sodHJ1ZSwgdHJ1ZSwgdHJ1ZSwgdHJ1ZSk7XG5cdFx0XHRcdGNvbnRleHQuZGVwdGhNYXNrKHRydWUgKTtcblxuXHRcdFx0XHRjb250ZXh0LnN0ZW5jaWxGdW5jKGNvbnRleHQuRVFVQUwsIDAsIDB4ZmZmZmZmZmYpOyAgLy8gZHJhdyBpZiA9PSAwXG5cdFx0XHRcdGNvbnRleHQuc3RlbmNpbE9wKGNvbnRleHQuS0VFUCwgY29udGV4dC5LRUVQLCBjb250ZXh0LktFRVApO1xuXHRcdFx0fVxuXG5cdFx0XHRmb3IodmFyIGk9MDsgaTx0aGlzLm9iamVjdFJlbmRlcmVycy5sZW5ndGg7IGkrKylcblx0XHRcdFx0dGhpcy5vYmplY3RSZW5kZXJlcnNbaV0uZHJhdygpO1xuXG5cdFx0XHR0aGlzLnJlbmRlcmVyLnJlbmRlcih0aGlzLnNjZW5lLCB0aGlzLmNhbWVyYSk7XG5cblx0XHRcdGlmKG1hc2tFbmFibGVkKSB7XG5cdFx0XHRcdGNvbnRleHQuZGlzYWJsZShjb250ZXh0LlNURU5DSUxfVEVTVCk7XG5cdFx0XHR9XG5cblx0XHRcdHRoaXMuZGlzcGF0Y2hFdmVudCh7dHlwZTogJ3JlbmRlcid9KTtcblx0XHR9O1xuXHR9O1xuXG5cdFdlYkdMVmlldy5wcm90b3R5cGUgPSBfLmV4dGVuZChuZXcgZ29vZ2xlLm1hcHMuT3ZlcmxheVZpZXcoKSwgbmV3IFRIUkVFLkV2ZW50RGlzcGF0Y2hlcigpKTtcblx0V2ViR0xWaWV3LnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFdlYkdMVmlldztcblxuXHRXZWJHTFZpZXcucHJvdG90eXBlLm9uQWRkID0gZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5nZXRQYW5lcygpLm92ZXJsYXlMYXllci5hcHBlbmRDaGlsZCh0aGlzLnJlbmRlcmVyLmRvbUVsZW1lbnQpO1xuXHRcdHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKTtcblx0XHR0aGlzLmRpc3BhdGNoRXZlbnQoe3R5cGU6ICdhZGRlZF90b19kb20nfSk7XG5cdH07XG5cblx0V2ViR0xWaWV3LnByb3RvdHlwZS5vblJlbW92ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYW52YXMgPSB0aGlzLnJlbmRlcmVyLmRvbUVsZW1lbnQ7XG5cdFx0dGhpcy5jYW52YXMucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZCh0aGlzLmNhbnZhcyk7XG5cdFx0dGhpcy5yZW1vdmVFdmVudExpc3RlbmVycygpO1xuXHRcdHRoaXMuZGlzcGF0Y2hFdmVudCh7dHlwZTogJ3JlbW92ZWRfZnJvbV9kb20nfSk7XG5cdH07XG5cblx0V2ViR0xWaWV3LnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24oKSB7XG5cdFx0Ly8hVE9ETzogUmVtb3ZlIGRlcGVuZGVuY3kgb2YgUG9pbnRSZW5kZXJlciBmcm9tIFdlYkdMVmlld1xuXHRcdHRoaXMucG9pbnRSZW5kZXJlciA9IG5ldyBQb2ludFJlbmRlcmVyKHRoaXMpLmluaXQoKTtcblx0XHR0aGlzLnNjZW5lLmFkZCh0aGlzLnBvaW50UmVuZGVyZXIuc2NlbmVPYmplY3QpO1xuXHRcdHRoaXMuc3ByaXRlUmVuZGVyZXIgPSBuZXcgU3ByaXRlUmVuZGVyZXIoKS5pbml0KCk7XG5cdFx0dGhpcy5zY2VuZS5hZGQodGhpcy5zcHJpdGVSZW5kZXJlci5zY2VuZU9iamVjdCk7XG5cdFx0dGhpcy5wb2x5Z29uUmVuZGVyZXIgPSBuZXcgUG9seWdvblJlbmRlcmVyKCkuaW5pdCgpO1xuXHRcdC8vIGFkZCB0aGVtIHRvIGFuIGFycmF5IHNvIHdlIGNhbiBkcmF3L3VwZGF0ZSB0aGVtIGFsbCBsYXRlclxuXHRcdHRoaXMub2JqZWN0UmVuZGVyZXJzLnB1c2godGhpcy5wb2ludFJlbmRlcmVyKTtcblx0XHR0aGlzLm9iamVjdFJlbmRlcmVycy5wdXNoKHRoaXMucG9seWdvblJlbmRlcmVyKTtcblx0XHR0aGlzLm9iamVjdFJlbmRlcmVycy5wdXNoKHRoaXMuc3ByaXRlUmVuZGVyZXIpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9O1xuXG5cdFdlYkdMVmlldy5wcm90b3R5cGUuYWRkRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbigpIHtcblx0XHR0aGlzLmNoYW5nZUhhbmRsZXIgPSBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcih0aGlzLm1hcCwgJ2JvdW5kc19jaGFuZ2VkJywgdGhpcy5kcmF3LmJpbmQodGhpcykpO1xuXHR9O1xuXG5cdFdlYkdMVmlldy5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbigpIHtcblx0XHRnb29nbGUubWFwcy5ldmVudC5yZW1vdmVMaXN0ZW5lcih0aGlzLmNoYW5nZUhhbmRsZXIpO1xuXHRcdHRoaXMuY2hhbmdlSGFuZGxlciA9IG51bGw7XG5cdH07XG5cblx0V2ViR0xWaWV3LnByb3RvdHlwZS5hZGRPYmplY3QgPSBmdW5jdGlvbihnZW9tZXRyeSkge1xuXHRcdHRoaXMuc2NlbmUuYWRkKGdlb21ldHJ5KTtcblx0fTtcblxuXHRXZWJHTFZpZXcucHJvdG90eXBlLnJlbW92ZU9iamVjdCA9IGZ1bmN0aW9uKGdlb21ldHJ5KSB7XG5cdFx0dGhpcy5zY2VuZS5yZW1vdmUoZ2VvbWV0cnkpO1xuXHR9O1xuXG5cdFdlYkdMVmlldy5wcm90b3R5cGUuYWRkUG9pbnQgPSBmdW5jdGlvbihvcHRpb25zKSB7XG5cdFx0cmV0dXJuIHRoaXMucG9pbnRSZW5kZXJlci5hZGQob3B0aW9ucyk7XG5cdH07XG5cblx0V2ViR0xWaWV3LnByb3RvdHlwZS5yZW1vdmVQb2ludCA9IGZ1bmN0aW9uKHBvaW50KSB7XG5cdFx0dGhpcy5wb2ludFJlbmRlcmVyLnJlbW92ZShwb2ludCk7XG5cdH07XG5cblx0V2ViR0xWaWV3LnByb3RvdHlwZS5hZGRTcHJpdGUgPSBmdW5jdGlvbihvcHRpb25zKSB7XG5cdFx0cmV0dXJuIHRoaXMuc3ByaXRlUmVuZGVyZXIuYWRkKG9wdGlvbnMpO1xuXHR9O1xuXG5cdFdlYkdMVmlldy5wcm90b3R5cGUucmVtb3ZlU3ByaXRlID0gZnVuY3Rpb24oc3ByaXRlKSB7XG5cdFx0dGhpcy5zcHJpdGVSZW5kZXJlci5yZW1vdmUoc3ByaXRlKTtcblx0fTtcblxuXHRXZWJHTFZpZXcucHJvdG90eXBlLmNyZWF0ZUdlb21ldHJ5ID0gZnVuY3Rpb24ob3B0aW9ucykge1xuXHRcdHZhciBnZW9tZXRyeSA9IHRoaXMucG9seWdvblJlbmRlcmVyLmNyZWF0ZShvcHRpb25zLCB0aGlzLnNjZW5lKTtcblx0XHR0aGlzLmFkZEdlb21ldHJ5KGdlb21ldHJ5KTtcblx0XHRyZXR1cm4gZ2VvbWV0cnk7XG5cdH07XG5cblx0V2ViR0xWaWV3LnByb3RvdHlwZS5hZGRHZW9tZXRyeSA9IGZ1bmN0aW9uKGdlb21ldHJ5KSB7XG5cdFx0dGhpcy5zY2VuZS5hZGQoZ2VvbWV0cnkuc2hhcGUpO1xuXHRcdHRoaXMuc2NlbmUuYWRkKGdlb21ldHJ5Lm91dGxpbmUpO1xuXHR9O1xuXG5cdFdlYkdMVmlldy5wcm90b3R5cGUucmVtb3ZlR2VvbWV0cnkgPSBmdW5jdGlvbihnZW9tZXRyeSkge1xuXHRcdHRoaXMuc2NlbmUucmVtb3ZlKGdlb21ldHJ5LnNoYXBlKTtcblx0XHR0aGlzLnNjZW5lLnJlbW92ZShnZW9tZXRyeS5vdXRsaW5lKTtcblx0fTtcblxuXHRXZWJHTFZpZXcucHJvdG90eXBlLmRlc3Ryb3lHZW9tZXRyeSA9IGZ1bmN0aW9uKGdlb21ldHJ5KSB7XG5cdFx0ZGVsZXRlIGdlb21ldHJ5LnNoYXBlO1xuXHRcdGRlbGV0ZSBnZW9tZXRyeS5vdXRsaW5lO1xuXHR9O1xuXG5cdFdlYkdMVmlldy5wcm90b3R5cGUuY3JlYXRlTWFzayA9IGZ1bmN0aW9uKG9wdGlvbnMpIHtcblx0XHR2YXIgbWFzayA9IHRoaXMucG9seWdvblJlbmRlcmVyLmNyZWF0ZShvcHRpb25zKTtcblx0XHR0aGlzLmFkZE1hc2sobWFzayk7XG5cdFx0dGhpcy5udW1NYXNrcysrO1xuXHRcdHJldHVybiBtYXNrO1xuXHR9O1xuXG5cdFdlYkdMVmlldy5wcm90b3R5cGUuYWRkTWFzayA9IGZ1bmN0aW9uKGdlb21ldHJ5KSB7XG5cdFx0dGhpcy5zY2VuZU1hc2suYWRkKGdlb21ldHJ5LnNoYXBlKTtcblx0XHR0aGlzLnNjZW5lTWFzay5hZGQoZ2VvbWV0cnkub3V0bGluZSk7XG5cdFx0dGhpcy5udW1NYXNrcysrO1xuXHR9O1xuXG5cdFdlYkdMVmlldy5wcm90b3R5cGUucmVtb3ZlTWFzayA9IGZ1bmN0aW9uKGdlb21ldHJ5KSB7XG5cdFx0dGhpcy5zY2VuZU1hc2sucmVtb3ZlKGdlb21ldHJ5LnNoYXBlKTtcblx0XHR0aGlzLnNjZW5lTWFzay5yZW1vdmUoZ2VvbWV0cnkub3V0bGluZSk7XG5cdFx0dGhpcy5udW1NYXNrcy0tO1xuXHR9O1xuXG5cdFdlYkdMVmlldy5wcm90b3R5cGUuZGVzdHJveU1hc2sgPSBmdW5jdGlvbihnZW9tZXRyeSkge1xuXHRcdGRlbGV0ZSBnZW9tZXRyeS5zaGFwZTtcblx0XHRkZWxldGUgZ2VvbWV0cnkub3V0bGluZTtcblx0fTtcblxuXHR3aW5kb3cuV2ViR0xWaWV3ID0gV2ViR0xWaWV3O1xufSgpKTsiLCIoZnVuY3Rpb24oKXtcblx0dmFyIGh0dHAgPSB7fTtcblxuXHRodHRwLmdldCA9IGZ1bmN0aW9uKHVybCwgb3B0aW9ucykge1xuXHRcdHZhciBkZWZlcnJlZCA9IFEuZGVmZXIoKTtcblx0XHR2YXIgcmVzcG9uc2VUeXBlID0gb3B0aW9ucy5yZXNwb25zZVR5cGU7XG5cdFx0aWYocmVzcG9uc2VUeXBlID09PSAnYmxvYicpIHtcblx0XHRcdHZhciBpbWFnZSA9ICQoXCI8aW1nIC8+XCIpLmF0dHIoJ3NyYycsIHVybCkub24oJ2xvYWQnLCBmdW5jdGlvbigpe1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlKHtkYXRhOmltYWdlWzBdfSk7XG5cdFx0XHR9KTtcblx0XHR9ZWxzZXtcblx0XHRcdCQuYWpheCh1cmwsIG9wdGlvbnMpXG5cdFx0XHRcdC5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEsIHN0YXR1cywgeGhyKXtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlKHtkYXRhOmRhdGEsIHN0YXR1czpzdGF0dXMsIHhocjp4aHJ9KTtcblx0XHRcdFx0fSlcblx0XHRcdFx0LmVycm9yKGZ1bmN0aW9uKHhociwgc3RhdHVzLCBlcnJvcil7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVqZWN0KHt4aHI6eGhyLCBzdGF0dXM6c3RhdHVzLCBlcnJvcjplcnJvcn0pO1xuXHRcdFx0XHR9KTtcblx0XHR9XG5cdFx0cmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG5cdH07XG5cblx0d2luZG93Lmh0dHAgPSBodHRwO1xufSgpKTsiLCIoZnVuY3Rpb24oKXtcblxuXHR2YXIgTUVSQ0FUT1JfUkFOR0UgPSAyNTY7XG5cblx0ZnVuY3Rpb24gY29udmVydFBvaW50VG9UaWxlKGxhdExuZywgem9vbSwgcHJvamVjdGlvbikge1xuXHRcdHZhciB3b3JsZENvb3JkaW5hdGUgPSBwcm9qZWN0aW9uLmZyb21MYXRMbmdUb1BvaW50KGxhdExuZyk7XG5cdFx0dmFyIHBpeGVsQ29vcmRpbmF0ZSA9IHt4OiB3b3JsZENvb3JkaW5hdGUueCAqIE1hdGgucG93KDIsIHpvb20pLCB5OiB3b3JsZENvb3JkaW5hdGUueSAqIE1hdGgucG93KDIsIHpvb20pfTtcblx0XHR2YXIgdGlsZUNvb3JkaW5hdGUgPSB7eDogTWF0aC5mbG9vcihwaXhlbENvb3JkaW5hdGUueCAvIE1FUkNBVE9SX1JBTkdFKSwgeTogTWF0aC5mbG9vcihwaXhlbENvb3JkaW5hdGUueSAvIE1FUkNBVE9SX1JBTkdFKX07XG5cdFx0cmV0dXJuIHRpbGVDb29yZGluYXRlO1xuXHR9XG5cblx0dmFyIFRpbGVDb250cm9sbGVyID0gZnVuY3Rpb24od2ViR2xWaWV3KSB7XG5cdFx0dGhpcy53ZWJHbFZpZXcgPSB3ZWJHbFZpZXc7XG5cdFx0dGhpcy5ib3VuZHMgPSBuZXcgUmVjdGFuZ2xlKDAsIDAsIDAsIDApO1xuXHRcdHRoaXMuem9vbSA9IDA7XG5cdFx0dGhpcy5taW5ab29tID0gMDtcblx0XHR0aGlzLm1heFpvb20gPSAxMDtcblx0XHR0aGlzLmVuYWJsZWQgPSBmYWxzZTtcblx0XHR0aGlzLnZpZXdzID0gW107XG5cdH07XG5cblx0VGlsZUNvbnRyb2xsZXIucHJvdG90eXBlLnNldE1hcCA9IGZ1bmN0aW9uKG1hcCkge1xuXHRcdGlmKG1hcCkge1xuXHRcdFx0dGhpcy5tYXAgPSBtYXA7XG5cdFx0XHR0aGlzLnVwZGF0ZSgpO1xuXHRcdFx0dGhpcy5fYWRkRXZlbnRMaXN0ZW5lcnMoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5fcmVtb3ZlRXZlbnRMaXN0ZW5lcnMoKTtcblx0XHRcdHRoaXMubWFwID0gbWFwO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHRUaWxlQ29udHJvbGxlci5wcm90b3R5cGUuYWRkVmlldyA9IGZ1bmN0aW9uKHZpZXcpIHtcblx0XHR2YXIgaW5kZXggPSB0aGlzLnZpZXdzLmluZGV4T2Yodmlldyk7XG5cdFx0aWYoaW5kZXggPCAwKSB0aGlzLnZpZXdzLnB1c2godmlldyk7XG5cdFx0dmFyIGIgPSB0aGlzLmJvdW5kcztcblx0XHR2aWV3LnNldFRpbGVTaXplKE1FUkNBVE9SX1JBTkdFKTtcblx0XHR2aWV3LnNob3dUaWxlcyhiLnVseCwgYi51bHksIGIubHJ4LCBiLmxyeSwgdGhpcy56b29tKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHRUaWxlQ29udHJvbGxlci5wcm90b3R5cGUucmVtb3ZlVmlldyA9IGZ1bmN0aW9uKHZpZXcpIHtcblx0XHR2YXIgaW5kZXggPSB0aGlzLnZpZXdzLmluZGV4T2Yodmlldyk7XG5cdFx0aWYoaW5kZXggPj0gMCkgdGhpcy52aWV3cy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdHZpZXcuY2xlYXIoKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fTtcblxuXHRUaWxlQ29udHJvbGxlci5wcm90b3R5cGUuX2FkZEV2ZW50TGlzdGVuZXJzID0gZnVuY3Rpb24oKSB7XG5cdFx0dGhpcy5jaGFuZ2VMaXN0ZW5lciA9IGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKHRoaXMubWFwLCBcImJvdW5kc19jaGFuZ2VkXCIsIHRoaXMudXBkYXRlLmJpbmQodGhpcykpO1xuXHR9O1xuXG5cdFRpbGVDb250cm9sbGVyLnByb3RvdHlwZS5fcmVtb3ZlRXZlbnRMaXN0ZW5lcnMgPSBmdW5jdGlvbigpIHtcblx0XHRnb29nbGUubWFwcy5ldmVudC5yZW1vdmVMaXN0ZW5lcih0aGlzLmNoYW5nZUxpc3RlbmVyKTtcblx0fTtcblxuXHRUaWxlQ29udHJvbGxlci5wcm90b3R5cGUuaGFzQ2hhbmdlZFpvb20gPSBmdW5jdGlvbih6b29tKSB7XG5cdFx0cmV0dXJuIHRoaXMuem9vbSAhPSB6b29tO1xuXHR9O1xuXG5cdFRpbGVDb250cm9sbGVyLnByb3RvdHlwZS5oYXNDaGFuZ2VkQm91bmRzID0gZnVuY3Rpb24odmlzaWJsZUJvdW5kcykge1xuXHRcdHZhciBjdXJyZW50Qm91bmRzID0gdGhpcy5ib3VuZHM7XG5cdFx0cmV0dXJuIGN1cnJlbnRCb3VuZHMudWx4ICE9IHZpc2libGVCb3VuZHMudWx4IHx8IFxuXHRcdFx0Y3VycmVudEJvdW5kcy51bHkgIT0gdmlzaWJsZUJvdW5kcy51bHkgfHwgXG5cdFx0XHRjdXJyZW50Qm91bmRzLmxyeCAhPSB2aXNpYmxlQm91bmRzLmxyeCB8fCBcblx0XHRcdGN1cnJlbnRCb3VuZHMubHJ5ICE9IHZpc2libGVCb3VuZHMubHJ5O1xuXHR9O1xuXG5cdFRpbGVDb250cm9sbGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWFwID0gdGhpcy5tYXAsXG5cdFx0XHRib3VuZHMgPSBtYXAuZ2V0Qm91bmRzKCksXG5cdFx0XHRib3VuZHNOZUxhdExuZyA9IGJvdW5kcy5nZXROb3J0aEVhc3QoKSxcblx0XHRcdGJvdW5kc1N3TGF0TG5nID0gYm91bmRzLmdldFNvdXRoV2VzdCgpLFxuXHRcdFx0Ym91bmRzTndMYXRMbmcgPSBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKGJvdW5kc05lTGF0TG5nLmxhdCgpLCBib3VuZHNTd0xhdExuZy5sbmcoKSksXG5cdFx0XHRib3VuZHNTZUxhdExuZyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcoYm91bmRzU3dMYXRMbmcubGF0KCksIGJvdW5kc05lTGF0TG5nLmxuZygpKSxcblx0XHRcdHpvb20gPSBtYXAuZ2V0Wm9vbSgpLFxuXHRcdFx0cHJvamVjdGlvbiA9IG1hcC5nZXRQcm9qZWN0aW9uKCksXG5cdFx0XHR0aWxlQ29vcmRpbmF0ZU53ID0gY29udmVydFBvaW50VG9UaWxlKGJvdW5kc053TGF0TG5nLCB6b29tLCBwcm9qZWN0aW9uKSxcblx0XHRcdHRpbGVDb29yZGluYXRlU2UgPSBjb252ZXJ0UG9pbnRUb1RpbGUoYm91bmRzU2VMYXRMbmcsIHpvb20sIHByb2plY3Rpb24pLFxuXHRcdFx0dmlzaWJsZUJvdW5kcyA9IG5ldyBSZWN0YW5nbGUodGlsZUNvb3JkaW5hdGVOdy54LCB0aWxlQ29vcmRpbmF0ZU53LnksIFxuXHRcdFx0XHR0aWxlQ29vcmRpbmF0ZVNlLngtdGlsZUNvb3JkaW5hdGVOdy54LCB0aWxlQ29vcmRpbmF0ZVNlLnktdGlsZUNvb3JkaW5hdGVOdy55KTtcblxuXHRcdHpvb20gPSBNYXRoLm1heCh0aGlzLm1pblpvb20sIHpvb20pO1xuXHRcdHpvb20gPSBNYXRoLm1pbih0aGlzLm1heFpvb20sIHpvb20pO1xuXG5cdFx0dmFyIGN1cnJlbnRCb3VuZHMgPSB0aGlzLmJvdW5kcztcblx0XHR2YXIgeCA9IE1hdGgubWluKGN1cnJlbnRCb3VuZHMudWx4LCB2aXNpYmxlQm91bmRzLnVseCksXG5cdFx0XHR5ID0gTWF0aC5taW4oY3VycmVudEJvdW5kcy51bHksIHZpc2libGVCb3VuZHMudWx5KSxcblx0XHRcdHdpZHRoID0gTWF0aC5tYXgoY3VycmVudEJvdW5kcy5scngsIHZpc2libGVCb3VuZHMubHJ4KSAtIHgsXG5cdFx0XHRoZWlnaHQgPSBNYXRoLm1heChjdXJyZW50Qm91bmRzLmxyeSwgdmlzaWJsZUJvdW5kcy5scnkpIC0geTtcblx0XHR2YXIgcmFuZ2UgPSBuZXcgUmVjdGFuZ2xlKHgsIHksIHdpZHRoLCBoZWlnaHQpO1xuXHRcdFxuXHRcdC8vIEhpZGUgZXZlcnl0aGluZyBpZiB3ZSBjaGFuZ2VkIHpvb20gbGV2ZWwuXG5cdFx0Ly8gVGhlbiBzZXQgdGhlIHJhbmdlIHRvIHVwZGF0ZSBvbmx5IHRoZSB2aXNpYmxlIHRpbGVzLlxuXHRcdGlmKHRoaXMuaGFzQ2hhbmdlZFpvb20oem9vbSkpIHtcblx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IGFsbCBjdXJyZW50bHkgdmlzaWJsZSB0aWxlcyB3aWxsIGJlIGhpZGRlbi5cblx0XHRcdHRoaXMudXBkYXRlVGlsZXMoY3VycmVudEJvdW5kcywgY3VycmVudEJvdW5kcywgbmV3IFJlY3RhbmdsZSgtMSwgLTEsIDAsIDApLCB0aGlzLnpvb20pO1xuXHRcdFx0Ly8gVGhlbiBtYWtlIHN1cmUgdGhhdCBhbGwgdGlsZXMgdGhhdCBzaG91bGQgYmUgdmlzaWJsZSB3aWxsIGNhbGwgc2hvd1RpbGUgYmVsb3cuXG5cdFx0XHRjdXJyZW50Qm91bmRzID0gbmV3IFJlY3RhbmdsZSgtMSwgLTEsIDAsIDApO1xuXHRcdFx0Ly8gV2Ugb25seSBuZWVkIHRvIHVwZGF0ZSBhbGwgdmlzaWJsZSB0aWxlcyBiZWxvdy5cblx0XHRcdHJhbmdlID0gdmlzaWJsZUJvdW5kcztcblx0XHR9XG5cblx0XHQvLyBJdGVyYXRlIGFsbCB0aGUgbGF5ZXJzIHRvIHVwZGF0ZSB3aGljaCB0aWxlcyBhcmUgdmlzaWJsZS5cblx0XHRpZih0aGlzLmhhc0NoYW5nZWRCb3VuZHModmlzaWJsZUJvdW5kcykpIHtcblx0XHRcdHRoaXMudXBkYXRlVGlsZXMocmFuZ2UsIGN1cnJlbnRCb3VuZHMsIHZpc2libGVCb3VuZHMsIHpvb20pO1xuXHRcdH1cblx0fTtcblxuXHRUaWxlQ29udHJvbGxlci5wcm90b3R5cGUudXBkYXRlVGlsZXMgPSBmdW5jdGlvbihyYW5nZSwgY3VycmVudEJvdW5kcywgdmlzaWJsZUJvdW5kcywgem9vbSkge1xuXHRcdHZhciB2aWV3cyA9IHRoaXMudmlld3M7XG5cdFx0Zm9yKHZhciBpPTA7IGk8dmlld3MubGVuZ3RoOyBpKyspIHtcblx0XHRcdGZvcih2YXIgY29sdW1uPXJhbmdlLnVseDsgY29sdW1uPD1yYW5nZS5scng7IGNvbHVtbisrKSB7XG5cdFx0XHRcdGZvcih2YXIgcm93PXJhbmdlLnVseTsgcm93PD1yYW5nZS5scnk7IHJvdysrKSB7XG5cdFx0XHRcdFx0aWYodmlzaWJsZUJvdW5kcy5jb250YWluc1BvaW50KGNvbHVtbiwgcm93KSkge1xuXHRcdFx0XHRcdFx0Ly8gT25seSBzaG93VGlsZSBpZiBpdCdzIG5vdCBhbHJlYWR5IHZpc2libGVcblx0XHRcdFx0XHRcdGlmKCFjdXJyZW50Qm91bmRzLmNvbnRhaW5zUG9pbnQoY29sdW1uLCByb3cpKVxuXHRcdFx0XHRcdFx0XHR2aWV3c1tpXS5zaG93VGlsZShjb2x1bW4sIHJvdywgem9vbSk7XG5cdFx0XHRcdFx0fWVsc2V7XG5cdFx0XHRcdFx0XHQvLyBIaWRlIHRpbGUgdGhhdCBpcyBjdXJyZW50bHkgdmlzaWJsZVxuXHRcdFx0XHRcdFx0aWYoY3VycmVudEJvdW5kcy5jb250YWluc1BvaW50KGNvbHVtbiwgcm93KSlcblx0XHRcdFx0XHRcdFx0dmlld3NbaV0uaGlkZVRpbGUoY29sdW1uLCByb3csIHpvb20pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0dGhpcy53ZWJHbFZpZXcuZHJhdygpO1xuXHRcdH1cblx0XHR0aGlzLnpvb20gPSB6b29tO1xuXHRcdHRoaXMuYm91bmRzID0gdmlzaWJsZUJvdW5kcztcblx0fTtcblxuXHR3aW5kb3cuVGlsZUNvbnRyb2xsZXIgPSBUaWxlQ29udHJvbGxlcjtcbn0oKSk7XG4iLCIoZnVuY3Rpb24oKXtcblx0dmFyIEdlb0pTT05EYXRhU291cmNlID0gZnVuY3Rpb24odXJsLCBwcm9qZWN0aW9uKXtcblx0XHR0aGlzLnVybCA9IHVybDtcblx0XHR0aGlzLnByb2plY3Rpb24gPSBwcm9qZWN0aW9uO1xuXHRcdHRoaXMuZmlsZUV4dGVuc2lvbiA9IFwianNvblwiO1xuXHRcdHRoaXMucmVzcG9uc2VUeXBlID0gXCJqc29uXCI7XG5cdH07XG5cblx0R2VvSlNPTkRhdGFTb3VyY2UucHJvdG90eXBlLnBhcnNlID0gZnVuY3Rpb24oZGF0YSkge1xuXHRcdHZhciBmZWF0dXJlQ29sbGVjdGlvbiA9IFtdO1xuXHRcdGlmKGRhdGEpIHtcblx0XHRcdGlmKGRhdGEudHlwZSA9PSBcIkZlYXR1cmVDb2xsZWN0aW9uXCIpIHtcblx0XHRcdFx0dmFyIGZlYXR1cmVzID0gZGF0YS5mZWF0dXJlcztcblx0XHRcdFx0Zm9yKHZhciBpPTA7IGk8ZmVhdHVyZXMubGVuZ3RoOyBpKyspXG5cdFx0XHRcdFx0ZmVhdHVyZUNvbGxlY3Rpb24ucHVzaCh0aGlzLl9wYXJzZUZlYXR1cmUoZmVhdHVyZXNbaV0pKTtcblx0XHRcdH1lbHNlIGlmKGRhdGEudHlwZSA9PSBcIkZlYXR1cmVcIikge1xuXHRcdFx0XHRmZWF0dXJlQ29sbGVjdGlvbi5wdXNoKHRoaXMuX3BhcnNlRmVhdHVyZShkYXRhKSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiBmZWF0dXJlQ29sbGVjdGlvbjtcblx0fTtcblxuXHRHZW9KU09ORGF0YVNvdXJjZS5wcm90b3R5cGUuX3BhcnNlRmVhdHVyZSA9IGZ1bmN0aW9uKGZlYXR1cmUpIHtcblx0XHR2YXIgcG9seWdvbnMgPSBbXTtcblx0XHRpZihmZWF0dXJlLmdlb21ldHJ5LnR5cGUgPT0gXCJQb2x5Z29uXCIpIHtcblx0XHRcdHBvbHlnb25zLnB1c2godGhpcy5fcGFyc2VQb2x5Z29uKGZlYXR1cmUuZ2VvbWV0cnkuY29vcmRpbmF0ZXMpKTtcblx0XHR9XG5cdFx0ZWxzZSBpZihmZWF0dXJlLmdlb21ldHJ5LnR5cGUgPT0gXCJNdWx0aVBvbHlnb25cIikge1xuXHRcdFx0dmFyIGNvb3JkaW5hdGVzID0gZmVhdHVyZS5nZW9tZXRyeS5jb29yZGluYXRlcztcblx0XHRcdGZvcih2YXIgaT0wOyBpPGNvb3JkaW5hdGVzLmxlbmd0aDsgaSsrKVxuXHRcdFx0XHRwb2x5Z29ucy5wdXNoKHRoaXMuX3BhcnNlUG9seWdvbihjb29yZGluYXRlc1tpXSkpO1xuXHRcdH1cblx0XHRyZXR1cm4gcG9seWdvbnM7XG5cdH07XG5cblx0R2VvSlNPTkRhdGFTb3VyY2UucHJvdG90eXBlLl9wYXJzZVBvbHlnb24gPSBmdW5jdGlvbihjb29yZGluYXRlcykge1xuXHRcdHZhciBwb2x5Z29uID0gW107XG5cdFx0Zm9yKHZhciBpPTA7IGk8Y29vcmRpbmF0ZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhciBwb2ludHMgPSBbXTtcblx0XHRcdGZvcih2YXIgaj0wOyBqPGNvb3JkaW5hdGVzW2ldLmxlbmd0aDsgaisrKSB7XG5cdFx0XHRcdHZhciBsYXRMbmcgPSBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKGNvb3JkaW5hdGVzW2ldW2pdWzFdLCBjb29yZGluYXRlc1tpXVtqXVswXSk7XG5cdFx0XHRcdHZhciBwb2ludCA9IHRoaXMucHJvamVjdGlvbi5mcm9tTGF0TG5nVG9Qb2ludChsYXRMbmcpO1xuXHRcdFx0XHRwb2ludHMucHVzaChbcG9pbnQueCwgcG9pbnQueV0pO1xuXHRcdFx0fVxuXHRcdFx0cG9seWdvbi5wdXNoKHBvaW50cyk7XG5cdFx0fVxuXHRcdHJldHVybiBwb2x5Z29uO1xuXHR9O1xuXG5cdHdpbmRvdy5HZW9KU09ORGF0YVNvdXJjZSA9IEdlb0pTT05EYXRhU291cmNlO1xufSgpKTsiLCIoZnVuY3Rpb24oKXtcblx0dmFyIEltYWdlRGF0YVNvdXJjZSA9IGZ1bmN0aW9uKHVybCl7XG5cdFx0dGhpcy51cmwgPSB1cmw7XG5cdFx0dGhpcy5maWxlRXh0ZW5zaW9uID0gXCJwbmdcIjtcblx0XHR0aGlzLnJlc3BvbnNlVHlwZSA9IFwiYmxvYlwiO1xuXHR9O1xuXG5cdEltYWdlRGF0YVNvdXJjZS5wcm90b3R5cGUucGFyc2UgPSBmdW5jdGlvbihkYXRhKXtcblx0XHRyZXR1cm4gZGF0YTtcblx0fTtcblxuXHR3aW5kb3cuSW1hZ2VEYXRhU291cmNlID0gSW1hZ2VEYXRhU291cmNlO1xufSgpKTsiLCIoZnVuY3Rpb24oKXtcblx0dmFyIFRpbGVQcm92aWRlciA9IGZ1bmN0aW9uKGRhdGFTb3VyY2UsICRodHRwLCAkcSkge1xuXHRcdHRoaXMuZGF0YVNvdXJjZSA9IGRhdGFTb3VyY2U7XG5cdFx0dGhpcy4kaHR0cCA9ICRodHRwO1xuXHRcdHRoaXMuJHEgPSAkcTtcblx0XHR0aGlzLnRpbGVzID0ge307XG5cdH07XG5cblx0VGlsZVByb3ZpZGVyLnByb3RvdHlwZS5nZXRUaWxlVXJsID0gZnVuY3Rpb24oeCwgeSwgeikge1xuXHRcdHJldHVybiB0aGlzLmRhdGFTb3VyY2UudXJsK1wiL1wiK3orXCIvXCIreCtcIi9cIit5K1wiLlwiK3RoaXMuZGF0YVNvdXJjZS5maWxlRXh0ZW5zaW9uO1xuXHR9O1xuXG5cdFRpbGVQcm92aWRlci5wcm90b3R5cGUuZ2V0VGlsZSA9IGZ1bmN0aW9uKHgsIHksIHopIHtcblx0XHR2YXIgZGVmZXJyZWQgPSB0aGlzLiRxLmRlZmVyKCk7XG5cdFx0dmFyIHVybCA9IHRoaXMuZ2V0VGlsZVVybCh4LCB5LCB6KTtcblx0XHRpZih0aGlzLnRpbGVzW3VybF0pe1xuXHRcdFx0ZGVmZXJyZWQucmVzb2x2ZSh7dXJsOnVybCwgZGF0YTp0aGlzLnRpbGVzW3VybF19KTtcblx0XHR9ZWxzZXtcblx0XHRcdHZhciBzZWxmID0gdGhpcztcblx0XHRcdHRoaXMuJGh0dHAuZ2V0KHVybCwge3Jlc3BvbnNlVHlwZTogdGhpcy5kYXRhU291cmNlLnJlc3BvbnNlVHlwZX0pXG5cdFx0XHRcdC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKXtcblx0XHRcdFx0XHRzZWxmLnRpbGVzW3VybF0gPSBzZWxmLmRhdGFTb3VyY2UucGFyc2UocmVzcG9uc2UuZGF0YSk7XG5cdFx0XHRcdFx0ZGVmZXJyZWQucmVzb2x2ZSh7dXJsOnVybCwgZGF0YTpzZWxmLnRpbGVzW3VybF19KTtcblx0XHRcdFx0fSwgZnVuY3Rpb24ocmVhc29uKXtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3QocmVhc29uKTtcblx0XHRcdFx0fSk7XG5cdFx0fVxuXHRcdHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuXHR9O1xuXG5cdHdpbmRvdy5UaWxlUHJvdmlkZXIgPSBUaWxlUHJvdmlkZXI7XG59KCkpOyIsIihmdW5jdGlvbigpe1xuXHR2YXIgSW1hZ2VUaWxlVmlldyA9IGZ1bmN0aW9uKHRpbGVQcm92aWRlciwgd2ViR2xWaWV3KSB7XG5cdFx0dGhpcy50aWxlUHJvdmlkZXIgPSB0aWxlUHJvdmlkZXI7XG5cdFx0dGhpcy53ZWJHbFZpZXcgPSB3ZWJHbFZpZXc7XG5cdFx0dGhpcy50aWxlcyA9IHt9O1xuXHR9O1xuXG5cdEltYWdlVGlsZVZpZXcucHJvdG90eXBlLnNldFRpbGVTaXplID0gZnVuY3Rpb24odGlsZVNpemUpIHtcblx0XHR0aGlzLnRpbGVTaXplID0gdGlsZVNpemU7XG5cdH07XG5cblx0SW1hZ2VUaWxlVmlldy5wcm90b3R5cGUuc2hvd1RpbGVzID0gZnVuY3Rpb24odWx4LCB1bHksIGxyeCwgbHJ5LCB6b29tKSB7XG5cdFx0Zm9yKHZhciBjb2x1bW49dWx4OyBjb2x1bW48PWxyeDsgY29sdW1uKyspIHtcblx0XHRcdGZvcih2YXIgcm93PXVseTsgcm93PD1scnk7IHJvdysrKSB7XG5cdFx0XHRcdHRoaXMuc2hvd1RpbGUoY29sdW1uLCByb3csIHpvb20pO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR0aGlzLndlYkdsVmlldy5kcmF3KCk7XG5cdH07XG5cblx0SW1hZ2VUaWxlVmlldy5wcm90b3R5cGUuc2hvd1RpbGUgPSBmdW5jdGlvbih4LCB5LCB6KSB7XG5cdFx0dmFyIHVybCA9IHRoaXMudGlsZVByb3ZpZGVyLmdldFRpbGVVcmwoeCwgeSwgeik7XG5cdFx0aWYodGhpcy50aWxlc1t1cmxdKSB7XG5cdFx0XHRpZighdGhpcy50aWxlc1t1cmxdLmdlb21ldHJ5KSB7XG5cdFx0XHRcdHZhciBzY2FsZUZhY3RvciA9IE1hdGgucG93KDIsIHopO1xuXHRcdFx0XHR2YXIgc3ByaXRlU2l6ZSA9IHRoaXMudGlsZVNpemUgLyBzY2FsZUZhY3Rvcjtcblx0XHRcdFx0dmFyIHNwcml0ZU9wdGlvbnMgPSB7XG5cdFx0XHRcdFx0cG9zaXRpb246IHt4Ongqc3ByaXRlU2l6ZSwgeTp5KnNwcml0ZVNpemUsIHo6en0sXG5cdFx0XHRcdFx0d2lkdGg6IHNwcml0ZVNpemUsXG5cdFx0XHRcdFx0aGVpZ2h0OiBzcHJpdGVTaXplLFxuXHRcdFx0XHRcdGltYWdlOiB0aGlzLnRpbGVzW3VybF0uZGF0YSxcblx0XHRcdFx0XHRpbWFnZU5hbWU6IHVybFxuXHRcdFx0XHR9O1xuXHRcdFx0XHR0aGlzLnRpbGVzW3VybF0uZ2VvbWV0cnkgPSB0aGlzLndlYkdsVmlldy5hZGRTcHJpdGUoc3ByaXRlT3B0aW9ucyk7XG5cdFx0XHRcdHRoaXMud2ViR2xWaWV3LmRyYXcoKTtcblx0XHRcdH1cblx0XHR9ZWxzZXtcblx0XHRcdHZhciBzZWxmID0gdGhpcztcblx0XHRcdHRoaXMudGlsZVByb3ZpZGVyLmdldFRpbGUoeCwgeSwgeilcblx0XHRcdFx0LnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xuXHRcdFx0XHRcdHNlbGYudGlsZXNbdXJsXSA9IHJlc3BvbnNlO1xuXHRcdFx0XHRcdHZhciBzY2FsZUZhY3RvciA9IE1hdGgucG93KDIsIHopO1xuXHRcdFx0XHRcdHZhciBzcHJpdGVTaXplID0gc2VsZi50aWxlU2l6ZSAvIHNjYWxlRmFjdG9yO1xuXHRcdFx0XHRcdHZhciBzcHJpdGVPcHRpb25zID0ge1xuXHRcdFx0XHRcdFx0cG9zaXRpb246IHt4Ongqc3ByaXRlU2l6ZSwgeTp5KnNwcml0ZVNpemUsIHo6en0sXG5cdFx0XHRcdFx0XHR3aWR0aDogc3ByaXRlU2l6ZSxcblx0XHRcdFx0XHRcdGhlaWdodDogc3ByaXRlU2l6ZSxcblx0XHRcdFx0XHRcdGltYWdlOiBzZWxmLnRpbGVzW3VybF0uZGF0YSxcblx0XHRcdFx0XHRcdGltYWdlTmFtZTogdXJsXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRzZWxmLnRpbGVzW3VybF0uZ2VvbWV0cnkgPSBzZWxmLndlYkdsVmlldy5hZGRTcHJpdGUoc3ByaXRlT3B0aW9ucyk7XG5cdFx0XHRcdFx0c2VsZi53ZWJHbFZpZXcuZHJhdygpO1xuXHRcdFx0XHR9LCBmdW5jdGlvbihyZWFzb24pe1xuXHRcdFx0XHRcdC8vY29uc29sZS5sb2cocmVhc29uKTtcblx0XHRcdFx0fSk7XG5cdFx0fVxuXHR9O1xuXG5cdEltYWdlVGlsZVZpZXcucHJvdG90eXBlLmhpZGVUaWxlID0gZnVuY3Rpb24oeCwgeSwgeikge1xuXHRcdHZhciB1cmwgPSB0aGlzLnRpbGVQcm92aWRlci5nZXRUaWxlVXJsKHgsIHksIHopO1xuXHRcdGlmKHRoaXMudGlsZXNbdXJsXSAmJiB0aGlzLnRpbGVzW3VybF0uZ2VvbWV0cnkpIHtcblx0XHRcdHRoaXMud2ViR2xWaWV3LnJlbW92ZVNwcml0ZSh0aGlzLnRpbGVzW3VybF0uZ2VvbWV0cnkpO1xuXHRcdFx0dGhpcy50aWxlc1t1cmxdLmdlb21ldHJ5ID0gbnVsbDtcblx0XHR9XG5cdH07XG5cblx0SW1hZ2VUaWxlVmlldy5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHtcblx0XHRmb3IodmFyIHVybCBpbiB0aGlzLnRpbGVzKSB7XG5cdFx0XHRpZih0aGlzLnRpbGVzW3VybF0uZ2VvbWV0cnkpIHtcblx0XHRcdFx0dGhpcy53ZWJHbFZpZXcucmVtb3ZlU3ByaXRlKHRoaXMudGlsZXNbdXJsXS5nZW9tZXRyeSk7XG5cdFx0XHRcdHRoaXMudGlsZXNbdXJsXS5nZW9tZXRyeSA9IG51bGw7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHRoaXMud2ViR2xWaWV3LmRyYXcoKTtcblx0fTtcblxuXHR3aW5kb3cuSW1hZ2VUaWxlVmlldyA9IEltYWdlVGlsZVZpZXc7XG59KCkpOyIsIihmdW5jdGlvbigpe1xuXG5cdGZ1bmN0aW9uIGNvbG9yVG9IZXgoYikge1xuXHRcdHZhciBoZXhDaGFyID0gW1wiMFwiLCBcIjFcIiwgXCIyXCIsIFwiM1wiLCBcIjRcIiwgXCI1XCIsIFwiNlwiLCBcIjdcIixcIjhcIiwgXCI5XCIsIFwiYVwiLCBcImJcIiwgXCJjXCIsIFwiZFwiLCBcImVcIiwgXCJmXCJdO1xuXHRcdHJldHVybiBoZXhDaGFyWyhiID4+IDIwKSAmIDB4MGZdICsgaGV4Q2hhclsoYiA+PiAxNikgJiAweDBmXSArIFxuXHRcdFx0aGV4Q2hhclsoYiA+PiAxMikgJiAweDBmXSArIGhleENoYXJbKGIgPj4gOCkgJiAweDBmXSArIFxuXHRcdFx0aGV4Q2hhclsoYiA+PiA0KSAmIDB4MGZdICsgaGV4Q2hhcltiICYgMHgwZl07XG5cdH1cblxuXHRmdW5jdGlvbiBnZXRSYW5kb21Db2xvcigpIHtcblx0XHRyZXR1cm4gKE1hdGguZmxvb3IoMjU1LjAqTWF0aC5yYW5kb20oKSkgJiAweEZGKSA8PCAxNiBcblx0XHRcdHwgKE1hdGguZmxvb3IoMjU1LjAqTWF0aC5yYW5kb20oKSkgJiAweEZGKSA8PCA4IFxuXHRcdFx0fCAoTWF0aC5mbG9vcigyNTUuMCpNYXRoLnJhbmRvbSgpKSAmIDB4RkYpO1xuXHR9XG5cblx0dmFyIFZlY3RvclRpbGVWaWV3ID0gZnVuY3Rpb24odGlsZVByb3ZpZGVyLCB3ZWJHbFZpZXcsIHVzZVJhbmRvbUNvbG9ycykge1xuXHRcdHRoaXMudGlsZVByb3ZpZGVyID0gdGlsZVByb3ZpZGVyO1xuXHRcdHRoaXMud2ViR2xWaWV3ID0gd2ViR2xWaWV3O1xuXHRcdHRoaXMudGlsZXMgPSB7fTtcblx0XHR0aGlzLnNob3duVGlsZXMgPSB7fTtcblxuXHRcdC8vIHVzZWQgZm9yIGRlYnVnZ2luZ1xuXHRcdHRoaXMudXNlUmFuZG9tQ29sb3JzID0gdXNlUmFuZG9tQ29sb3JzO1xuXHR9O1xuXG5cdFZlY3RvclRpbGVWaWV3LnByb3RvdHlwZS5zZXRUaWxlU2l6ZSA9IGZ1bmN0aW9uKHRpbGVTaXplKSB7XG5cdFx0dGhpcy50aWxlU2l6ZSA9IHRpbGVTaXplO1xuXHR9O1xuXG5cdFZlY3RvclRpbGVWaWV3LnByb3RvdHlwZS5zZXRUaWxlU2l6ZSA9IGZ1bmN0aW9uKHRpbGVTaXplKSB7XG5cdFx0dGhpcy50aWxlU2l6ZSA9IHRpbGVTaXplO1xuXHR9O1xuXG5cdFZlY3RvclRpbGVWaWV3LnByb3RvdHlwZS5zaG93VGlsZXMgPSBmdW5jdGlvbih1bHgsIHVseSwgbHJ4LCBscnksIHpvb20pIHtcblx0XHRmb3IodmFyIGNvbHVtbj11bHg7IGNvbHVtbjw9bHJ4OyBjb2x1bW4rKykge1xuXHRcdFx0Zm9yKHZhciByb3c9dWx5OyByb3c8PWxyeTsgcm93KyspIHtcblx0XHRcdFx0dGhpcy5zaG93VGlsZShjb2x1bW4sIHJvdywgem9vbSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHRoaXMud2ViR2xWaWV3LmRyYXcoKTtcblx0fTtcblxuXHRWZWN0b3JUaWxlVmlldy5wcm90b3R5cGUuc2hvd1RpbGUgPSBmdW5jdGlvbih4LCB5LCB6KSB7XG5cdFx0dmFyIHVybCA9IHRoaXMudGlsZVByb3ZpZGVyLmdldFRpbGVVcmwoeCwgeSwgeik7XG5cdFx0aWYodGhpcy5zaG93blRpbGVzW3VybF0pIHJldHVybjtcblx0XHR0aGlzLnNob3duVGlsZXNbdXJsXSA9IHRydWU7XG5cblx0XHRpZih0aGlzLnRpbGVzW3VybF0pIHtcblx0XHRcdGlmKHRoaXMudGlsZXNbdXJsXS5nZW9tZXRyeSkge1xuXHRcdFx0XHR0aGlzLndlYkdsVmlldy5hZGRHZW9tZXRyeSh0aGlzLnRpbGVzW3VybF0uZ2VvbWV0cnkpO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZih0aGlzLnRpbGVzW3VybF0uZGF0YSkge1xuXHRcdFx0XHR2YXIgb3B0aW9ucyA9IHt9O1xuXHRcdFx0XHRvcHRpb25zLmZlYXR1cmVzID0gdGhpcy50aWxlc1t1cmxdLmRhdGE7XG5cdFx0XHRcdG9wdGlvbnMuZmlsbENvbG9yID0gdGhpcy51c2VSYW5kb21Db2xvcnMgPyBnZXRSYW5kb21Db2xvcigpIDogbnVsbDtcblx0XHRcdFx0dGhpcy50aWxlc1t1cmxdLmdlb21ldHJ5ID0gdGhpcy53ZWJHbFZpZXcuY3JlYXRlR2VvbWV0cnkob3B0aW9ucyk7XG5cdFx0XHRcdHRoaXMud2ViR2xWaWV3LmRyYXcoKTtcblx0XHRcdH1cblx0XHR9ZWxzZXtcblx0XHRcdHZhciBzZWxmID0gdGhpcztcblx0XHRcdHRoaXMudGlsZVByb3ZpZGVyLmdldFRpbGUoeCwgeSwgeilcblx0XHRcdFx0LnRoZW4oZnVuY3Rpb24ocmVzcG9uc2Upe1xuXHRcdFx0XHRcdHNlbGYudGlsZXNbdXJsXSA9IHJlc3BvbnNlO1xuXHRcdFx0XHRcdGlmKHNlbGYuc2hvd25UaWxlc1t1cmxdKSB7XG5cdFx0XHRcdFx0XHR2YXIgb3B0aW9ucyA9IHt9O1xuXHRcdFx0XHRcdFx0b3B0aW9ucy5mZWF0dXJlcyA9IHNlbGYudGlsZXNbdXJsXS5kYXRhO1xuXHRcdFx0XHRcdFx0b3B0aW9ucy5maWxsQ29sb3IgPSBzZWxmLnVzZVJhbmRvbUNvbG9ycyA/IGdldFJhbmRvbUNvbG9yKCkgOiBudWxsO1xuXHRcdFx0XHRcdFx0c2VsZi50aWxlc1t1cmxdLmdlb21ldHJ5ID0gc2VsZi53ZWJHbFZpZXcuY3JlYXRlR2VvbWV0cnkob3B0aW9ucyk7XG5cdFx0XHRcdFx0XHRzZWxmLndlYkdsVmlldy5kcmF3KCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LCBmdW5jdGlvbihyZWFzb24pe1xuXHRcdFx0XHRcdC8vY29uc29sZS5sb2cocmVhc29uKTtcblx0XHRcdFx0fSk7XG5cdFx0fVxuXHR9O1xuXG5cdFZlY3RvclRpbGVWaWV3LnByb3RvdHlwZS5oaWRlVGlsZSA9IGZ1bmN0aW9uKHgsIHksIHopIHtcblx0XHR2YXIgdXJsID0gdGhpcy50aWxlUHJvdmlkZXIuZ2V0VGlsZVVybCh4LCB5LCB6KTtcblx0XHR0aGlzLnNob3duVGlsZXNbdXJsXSA9IGZhbHNlO1xuXG5cdFx0aWYodGhpcy50aWxlc1t1cmxdICYmIHRoaXMudGlsZXNbdXJsXS5nZW9tZXRyeSkge1xuXHRcdFx0dGhpcy53ZWJHbFZpZXcucmVtb3ZlR2VvbWV0cnkodGhpcy50aWxlc1t1cmxdLmdlb21ldHJ5KTtcblx0XHRcdGRlbGV0ZSB0aGlzLnRpbGVzW3VybF0uZ2VvbWV0cnk7XG5cdFx0XHR0aGlzLnRpbGVzW3VybF0uZ2VvbWV0cnkgPSBudWxsO1xuXHRcdH1cblx0fTtcblxuXHRWZWN0b3JUaWxlVmlldy5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHtcblx0XHRmb3IodmFyIHVybCBpbiB0aGlzLnRpbGVzKSB7XG5cdFx0XHRpZih0aGlzLnRpbGVzW3VybF0uZ2VvbWV0cnkpXG5cdFx0XHRcdHRoaXMud2ViR2xWaWV3LnJlbW92ZUdlb21ldHJ5KHRoaXMudGlsZXNbdXJsXS5nZW9tZXRyeSk7XG5cdFx0fVxuXHRcdHRoaXMud2ViR2xWaWV3LmRyYXcoKTtcblx0fTtcblxuXHR3aW5kb3cuVmVjdG9yVGlsZVZpZXcgPSBWZWN0b3JUaWxlVmlldztcbn0oKSk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
