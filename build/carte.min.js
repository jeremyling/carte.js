var carte={};!function(){var t=function(t,e,i,s){this.x=t,this.y=e,this.width=i,this.height=s,this.ulx=t,this.uly=e,this.lrx=t+i,this.lry=e+i};t.prototype.containsPoint=function(t,e){return this.ulx<=t&&t<=this.lrx&&this.uly<=e&&e<=this.lry},t.prototype.containsRect=function(t){return this.containsPoint(t.x,t.y)&&this.containsPoint(t.x+t.width,t.y+t.height)},t.prototype.containsDimensions=function(t,e){return this.width>=t&&this.height>=e},t.prototype.getNormalizedRect=function(e,i){var s=this.x/e,n=this.y/i,o=this.width/e,r=this.height/i;return new t(s,n,o,r)},window.Rectangle=t}(),function(){var t=function(t){this.rect=t,this.name="sprite0",this.image=null,this.child=[]};t.prototype.computeNormal=function(t,e){return this.maxWidth=t,this.maxHeight=e,this.normalRect=this.rect.getNormalizedRect(t,e),this},t.prototype.insert=function(e,i){var s=null;if(null!==this.image)return this.child.length>0?(s=this.child[0].insert(e,i),null!==s?s:this.child[1].insert(e,i)):null;if(this.rect.containsDimensions(i.width,i.height)){if(this.rect.width==i.width&&this.rect.height==i.height)return this.name=e,this.image=i,this;if(this.child.length>0)return s=this.child[0].insert(e,i),null!==s?s:this.child[1].insert(e,i);var n=this.rect,o=this.rect.width-i.width,r=this.rect.height-i.height;return o>r?(this.child[0]=new t(new Rectangle(n.x,n.y,i.width,n.height)),this.child[1]=new t(new Rectangle(n.x+i.width,n.y,o,n.height))):(this.child[0]=new t(new Rectangle(n.x,n.y,n.width,i.height)),this.child[1]=new t(new Rectangle(n.x,n.y+i.height,n.width,r))),this.child[0].computeNormal(this.maxWidth,this.maxHeight),this.child[1].computeNormal(this.maxWidth,this.maxHeight),this.child[0].insert(e,i)}return null},t.prototype.get=function(t){if(this.name==t)return this;if(this.child.length>0){var e=this.child[0].get(t);return null!==e?e:this.child[1].get(t)}return null},t.prototype["delete"]=function(t){var e=this.get(t);return e&&e.clear(),e},t.prototype.clear=function(){this.name="",this.image=null};var e=function(e,i){this.canvas=document.createElement("canvas"),this.canvas.width=e,this.canvas.height=i,this.context=this.canvas.getContext("2d"),this.texture=new THREE.Texture(this.canvas),this.texture.minFilter=THREE.NearestFilter,this.texture.magFilter=THREE.NearestFilter,this.texture.flipY=!1,this.pnode=new t(new Rectangle(0,0,e,i)),this.pnode.computeNormal(e,i)};e.prototype=new THREE.EventDispatcher,e.prototype.constructor=e,e.prototype.get=function(t){return this.pnode.get(t)},e.prototype.add=function(t,e){if(void 0===e||null===e)return null;if(null!==this.get(t))return null;var i=this.pnode.insert(t,e);if(i){var s=i.rect;this.context.drawImage(e,s.x,s.y),this.texture.needsUpdate=!0,this.dispatchEvent({type:"sprite_added"})}return i},e.prototype.remove=function(t){var e=this.pnode["delete"](t);if(e){var i=e.rect;this.context.clearRect(i.x,i.y,i.width,i.height),this.texture.needsUpdate=!0,this.dispatchEvent({type:"sprite_removed"})}return e},e.prototype.load=function(t,e){},window.DynamicSpriteSheet=e}(),function(){var t=function(){};t.prototype.init=function(){return this},t.prototype.draw=function(){return this},t.prototype.update=function(){return this},t.prototype.create=function(t){t=t||{};var e=t.features||[],i=null!==t.strokeColor&&void 0!==t.strokeColor?t.strokeColor:16777215;if(null===e||0===e.length)return null;for(var s=new THREE.Geometry,n=0;n<e.length;n++)for(var o=e[n],r=0;r<o.length;r++){var h=o[r],a={x:h[0],y:h[1]},l=new THREE.Vector3(a.x,a.y,1);s.vertices.push(l);var d,p,u;r==o.length-1?(d=o[0],p={x:d[0],y:d[1]},u=new THREE.Vector3(p.x,p.y,1),s.vertices.push(u)):(d=o[r+1],p={x:d[0],y:d[1]},u=new THREE.Vector3(p.x,p.y,1),s.vertices.push(u))}var c=new THREE.LineSegments(s,new THREE.LineBasicMaterial({color:i,linewidth:2,opacity:.25,transparent:!0,depthWrite:!1,depthTest:!1}));return c},window.LineRenderer=t}(),function(){var t=function(){};t.prototype.init=function(){return this},t.prototype.draw=function(){},t.prototype.update=function(){},t.prototype.create=function(t){},t.prototype.add=function(t){},t.prototype.remove=function(t){},t.prototype.destroy=function(t){},window.ObjectRenderer=t}(),function(){var t="uniform float pointSize;attribute vec4 tile;varying vec4 vTile;varying vec3 vColor;void main() {	vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);	gl_Position = projectionMatrix * mvPosition;	gl_PointSize = pointSize;	vTile = tile;	vColor = color;}",e="uniform sampler2D tex1;uniform vec2 spriteSize;varying vec4 vTile;varying vec3 vColor;void main() {	vec2 tileUV = vTile.xy + vTile.zw * gl_PointCoord;	gl_FragColor = texture2D(tex1, tileUV) * vec4(vColor.rgb, 1.0);}",i=Math.pow(2,32)-1,s=-99999,n=function(){};n.prototype=Object.create(THREE.EventDispatcher.prototype);var o=function(t){this.webGlView=t,this.pointSize=32,this.raycaster=new THREE.Raycaster,this.mouse=new THREE.Vector2,this.markers={},this.hoveredMarker=null,this.minIndex=i,this.maxIndex=0,this.index=0};o.prototype.init=function(){return this.positions=new Float32Array(3e6),this.positions.fill(s),this.positionsAttribute=new THREE.BufferAttribute(this.positions,3),this.positionsAttribute.setDynamic(!0),this.colors=new Float32Array(3e6),this.colorsAttribute=new THREE.BufferAttribute(this.colors,3),this.colorsAttribute.setDynamic(!0),this.tiles=new Float32Array(4e6),this.tilesAttribute=new THREE.BufferAttribute(this.tiles,4),this.tilesAttribute.setDynamic(!0),this.geometry=new THREE.BufferGeometry,this.geometry.addAttribute("position",this.positionsAttribute),this.geometry.addAttribute("color",this.colorsAttribute),this.geometry.addAttribute("tile",this.tilesAttribute),this.spriteSheet=new DynamicSpriteSheet(256,256),this.material=new THREE.ShaderMaterial({uniforms:{tex1:{type:"t",value:this.spriteSheet.texture},pointSize:{type:"f",value:this.pointSize}},vertexColors:THREE.VertexColors,vertexShader:t,fragmentShader:e,transparent:!0,depthWrite:!1,depthTest:!1}),this.sceneObject=new THREE.Points(this.geometry,this.material),this.raycastObjects=[this.sceneObject],this.addEventListeners(),this},o.prototype.addEventListeners=function(){var t=this.webGlView.getMap();google.maps.event.addListener(t,"mousemove",this.handleDocumentMouseMove.bind(this)),google.maps.event.addListener(t,"click",this.handleDocumentMouseClick.bind(this))},o.prototype.handleDocumentMouseMove=function(t){this.update(t)},o.prototype.handleDocumentMouseClick=function(t){this.update(t),this.hoveredMarker&&this.hoveredMarker.dispatchEvent({type:"click"})},o.prototype._createMarker=function(t){var e=new n;return e.index=t,this.markers[t]=e,e},o.prototype.add=function(t){for(var e=3*this.index;e<this.positions.length&&this.positions[e]!==s;)e=3*++this.index;if(e>=this.positions.length)return void console.log("[PointRenderer] Run out of points!!!");t=t||{},t.position=t.position||{x:0,y:0,z:0},t.color=t.color||{r:1,g:1,b:1},this.positions[e+0]=t.position.x,this.positions[e+1]=t.position.y,this.positions[e+2]=t.position.z,this.colors[e+0]=t.color.r,this.colors[e+1]=t.color.g,this.colors[e+2]=t.color.b;var i=this.spriteSheet.get(t.imageName);i||(i=this.spriteSheet.add(t.imageName,t.image),i||console.log("[PointRenderer] SpriteSheet already full."));var n=null!==i?i.normalRect:{x:0,y:0,width:0,height:0};this.tiles[4*this.index+0]=n.x,this.tiles[4*this.index+1]=n.y,this.tiles[4*this.index+2]=n.width,this.tiles[4*this.index+3]=n.height,this.minIndex=Math.min(this.minIndex,this.index),this.maxIndex=Math.max(this.maxIndex,this.index);var o=this.markers[this.index]||this._createMarker(this.index);return o.options=t,this.index++,o},o.prototype.remove=function(t){var e=3*t.index;this.positions[e+0]=s,this.positions[e+1]=s,this.positions[e+2]=s,this.minIndex=Math.min(this.minIndex,t.index),this.maxIndex=Math.max(this.maxIndex,t.index),this.index>t.index&&(this.index=t.index)},o.prototype.draw=function(){this.minIndex=this.minIndex==i?0:this.minIndex;var t=this.maxIndex!=this.minIndex;this.positionsAttribute.updateRange.offset=3*this.minIndex,this.positionsAttribute.updateRange.count=3*this.maxIndex+3-3*this.minIndex,this.positionsAttribute.needsUpdate=t,this.colorsAttribute.updateRange.offset=3*this.minIndex,this.colorsAttribute.updateRange.count=3*this.maxIndex+3-3*this.minIndex,this.colorsAttribute.needsUpdate=t,this.tilesAttribute.updateRange.offset=4*this.minIndex,this.tilesAttribute.updateRange.count=4*this.maxIndex+4-4*this.minIndex,this.tilesAttribute.needsUpdate=t,t&&(this.geometry.computeBoundingBox(),this.geometry.computeBoundingSphere()),this.minIndex=i,this.maxIndex=0},o.prototype.update=function(t){void 0!==t.clientX&&void 0!==t.clientY?(this.mouse.x=t.clientX/this.webGlView.width*2-1,this.mouse.y=2*-(t.clientY/this.webGlView.height)+1):t.pixel&&(this.mouse.x=t.pixel.x/this.webGlView.width*2-1,this.mouse.y=2*-(t.pixel.y/this.webGlView.height)+1),this.raycaster.params.Points.threshold=16/Math.pow(2,this.webGlView.scale),this.raycaster.setFromCamera(this.mouse,this.webGlView.camera);var e=this.raycaster.intersectObjects(this.raycastObjects);intersection=e.length>0?e[0]:null,intersection?(null===this.hoveredMarker?(this.hoveredMarker=this.markers[intersection.index],this.hoveredMarker.dispatchEvent({type:"mouseover"})):this.hoveredMarker.index!=intersection.index&&(this.hoveredMarker.dispatchEvent({type:"mouseout"}),this.hoveredMarker=this.markers[intersection.index],this.hoveredMarker.dispatchEvent({type:"mouseover"})),this.webGlView&&this.webGlView.map&&this.webGlView.map.setOptions({draggableCursor:"pointer"})):(null!==this.hoveredMarker&&(this.hoveredMarker.dispatchEvent({type:"mouseout"}),this.hoveredMarker=null),this.webGlView&&this.webGlView.map&&this.webGlView.map.setOptions({draggableCursor:null}))},window.PointRenderer=o}(),function(){var t=function(){};t.prototype=new ObjectRenderer,t.prototype.constructor=t,t.prototype.create=function(t){t=t||{};var e=t.features||[],i=null!==t.fillColor&&void 0!==t.fillColor?t.fillColor:255,s=null!==t.strokeColor&&void 0!==t.strokeColor?t.strokeColor:16777215;if(null===e||0===e.length)return null;for(var n=new THREE.Geometry,o=new THREE.Geometry,r=n.vertices.length,h=0,a=0;a<e.length;a++)for(var l=e[a],d=0;d<l.length;d++){for(var p=l[d],u=[],c=[],m=0,v=0;v<p.length;v++){var g=p[v],y={x:g[0],y:g[1]};u.push(y.x),u.push(y.y);var f=new THREE.Vector3(y.x,y.y,1001);n.vertices.push(f);var w=new THREE.Vector3(y.x,y.y,1);o.vertices.push(w);var x,b,E;v==p.length-1?(x=p[0],b={x:x[0],y:x[1]},E=new THREE.Vector3(b.x,b.y,1),o.vertices.push(E)):(x=p[v+1],b={x:x[0],y:x[1]},E=new THREE.Vector3(b.x,b.y,1),o.vertices.push(E))}d>0&&c.push(m),m+=p.length;for(var R=earcut(u,null,2),T=0;T<R.length;T+=3){var M=new THREE.Face3(R[T+2]+r,R[T+1]+r,R[T+0]+r);n.faces.push(M)}r=n.vertices.length,h++}var S=new THREE.Mesh(n,new THREE.MeshBasicMaterial({color:i,opacity:.25,transparent:!0,depthWrite:!1,depthTest:!1})),L=new THREE.LineSegments(o,new THREE.LineBasicMaterial({color:s,linewidth:2,opacity:.25,transparent:!0,depthWrite:!1,depthTest:!1}));return{shape:S,outline:L}},window.PolygonRenderer=t}(),function(){var t="attribute vec4 tile;varying vec2 vUv;varying vec4 vTile;void main() {	vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);	gl_Position = projectionMatrix * mvPosition;	vUv = uv;	vTile = tile;}",e="uniform sampler2D tex1;uniform float alpha;varying vec2 vUv;varying vec4 vTile;void main() {	vec2 uv = vTile.xy + vTile.zw * vUv;	gl_FragColor = texture2D(tex1, uv) * vec4(1, 1, 1, alpha);}",i=Math.pow(2,32)-1,s=-99999,n=12,o=6,r=8,h=16,a=function(){this.minIndex=i,this.maxIndex=0,this.index=0,this.sprites=[],this.opacity=.8};a.prototype.init=function(){return this.positions=new Float32Array(1024*n),this.positions.fill(s),this.positionsAttribute=new THREE.BufferAttribute(this.positions,3),this.positionsAttribute.setDynamic(!0),this.indices=new Uint16Array(1024*o),this.indicesAttribute=new THREE.BufferAttribute(this.indices,1),this.indicesAttribute.setDynamic(!0),this.uv=new Float32Array(1024*r),this.uvAttribute=new THREE.BufferAttribute(this.uv,2),this.uvAttribute.setDynamic(!0),this.tiles=new Float32Array(1024*h),this.tilesAttribute=new THREE.BufferAttribute(this.tiles,4),this.tilesAttribute.setDynamic(!0),this.geometry=new THREE.BufferGeometry,this.geometry.setIndex(this.indicesAttribute),this.geometry.addAttribute("position",this.positionsAttribute),this.geometry.addAttribute("uv",this.uvAttribute),this.geometry.addAttribute("tile",this.tilesAttribute),this.spriteSheet=new DynamicSpriteSheet(4096,4096),this.material=new THREE.ShaderMaterial({uniforms:{tex1:{type:"t",value:this.spriteSheet.texture},alpha:{type:"f",value:this.opacity}},vertexShader:t,fragmentShader:e}),this.sceneObject=new THREE.Mesh(this.geometry,this.material),this},a.prototype.add=function(t){for(var e=this.index*n;e<this.positions.length&&this.positions[e]!==s;)e=++this.index*n;if(e>=this.positions.length)return void console.log("[SpriteRenderer] Run out of points!!!");var i=t.image,a=t.imageName,l=this.spriteSheet.get(a);l||(l=this.spriteSheet.add(a,i),l||console.log("[SpriteRenderer] SpriteSheet already full.")),t=t||{},t.position=t.position||{x:0,y:0,z:0},t.width=t.width||256,t.height=t.height||256,t.imageName=t.icon||"red-dot",this.positions[e+0]=t.position.x,this.positions[e+1]=t.position.y,this.positions[e+2]=t.position.z,this.positions[e+3]=t.position.x+t.width,this.positions[e+4]=t.position.y,this.positions[e+5]=t.position.z,this.positions[e+6]=t.position.x,this.positions[e+7]=t.position.y+t.height,this.positions[e+8]=t.position.z,this.positions[e+9]=t.position.x+t.width,this.positions[e+10]=t.position.y+t.height,this.positions[e+11]=t.position.z;var d=this.index*o;this.indices[d+0]=4*this.index+0,this.indices[d+1]=4*this.index+2,this.indices[d+2]=4*this.index+1,this.indices[d+3]=4*this.index+1,this.indices[d+4]=4*this.index+2,this.indices[d+5]=4*this.index+3;var p=this.index*r;this.uv[p+0]=0,this.uv[p+1]=0,this.uv[p+2]=1,this.uv[p+3]=0,this.uv[p+4]=0,this.uv[p+5]=1,this.uv[p+6]=1,this.uv[p+7]=1;var u=this.index*h;return this.tiles[u+0]=this.tiles[u+4]=this.tiles[u+8]=this.tiles[u+12]=l.normalRect.x,this.tiles[u+1]=this.tiles[u+5]=this.tiles[u+9]=this.tiles[u+13]=l.normalRect.y,this.tiles[u+2]=this.tiles[u+6]=this.tiles[u+10]=this.tiles[u+14]=l.normalRect.width,this.tiles[u+3]=this.tiles[u+7]=this.tiles[u+11]=this.tiles[u+15]=l.normalRect.height,this.minIndex=Math.min(this.minIndex,this.index),this.maxIndex=Math.max(this.maxIndex,this.index),{index:this.index++,name:a}},a.prototype.remove=function(t){for(var e=t.index*n,i=0;n>i;i++)this.positions[e+i]=s;this.spriteSheet.remove(t.name),this.minIndex=Math.min(this.minIndex,t.index),this.maxIndex=Math.max(this.maxIndex,t.index),this.index>t.index&&(this.index=t.index)},a.prototype.draw=function(){this.minIndex=this.minIndex==i?0:this.minIndex;var t=this.maxIndex!=this.minIndex,e=n;this.positionsAttribute.updateRange.offset=this.minIndex*e,this.positionsAttribute.updateRange.count=this.maxIndex*e+e-this.minIndex*e,this.positionsAttribute.needsUpdate=t;var s=o;this.indicesAttribute.updateRange.offset=this.minIndex*s,this.indicesAttribute.updateRange.count=this.maxIndex*s+s-this.minIndex*s,this.indicesAttribute.needsUpdate=t;var a=r;this.uvAttribute.updateRange.offset=this.minIndex*a,this.uvAttribute.updateRange.count=this.maxIndex*a+a-this.minIndex*a,this.uvAttribute.needsUpdate=t;var l=h;this.tilesAttribute.updateRange.offset=this.minIndex*l,this.tilesAttribute.updateRange.count=this.maxIndex*l+l-this.minIndex*l,this.tilesAttribute.needsUpdate=t,t&&(this.geometry.computeBoundingBox(),this.geometry.computeBoundingSphere()),this.minIndex=i,this.maxIndex=0},window.SpriteRenderer=a}(),function(){var t=function(t){this.name=t.name;var e=t.x,i=t.y,s=t.width,n=t.height;this.rect=new Rectangle(e,i,s,n)};t.prototype.computeNormal=function(t,e){return this.normalRect=this.rect.getNormalizedRect(t,e),this};var e=function(e,i){this.texture=e,this.sprites={};for(var s=0;s<i.length;s++)this.sprites[i[s].name]=new t(i[s]).computeNormal(e.image.width,e.image.height)};e.prototype.get=function(t){return this.sprites[t]},window.SpriteSheet=e}(),function(){var t=function(){for(var t=document.createElement("div"),e=["transform","WebkitTransform","MozTransform","OTransform","msTransform"],i=0;i<e.length;i++){var s=e[i];if(void 0!==t.style[s])return s}return e[0]}(),e=function(e){this._map=e,this.camera=new THREE.OrthographicCamera(0,255,0,255,-3e3,3e3),this.camera.position.z=1e3,this.scene=new THREE.Scene,this.sceneMask=new THREE.Scene,this.renderer=new THREE.WebGLRenderer({alpha:!0,antialiasing:!0,clearColor:0,clearAlpha:0}),this.renderer.setPixelRatio(window.devicePixelRatio),this.renderer.autoClear=!1,this.renderer.domElement.style["pointer-events"]="none",this.context=this.renderer.context,this.animationFrame=null,this.objectRenderers=[],this.numMasks=0,this.update=function(){var e=this.map,i=e.getBounds(),s=new google.maps.LatLng(i.getNorthEast().lat(),i.getSouthWest().lng()),n=this.renderer.domElement,o=this.getProjection().fromLatLngToDivPixel(s);n.style[t]="translate("+Math.round(o.x)+"px,"+Math.round(o.y)+"px)";var r=e.getDiv(),h=r.clientWidth,a=r.clientHeight;(h!==this.width||a!==this.height)&&(this.width=h,this.height=a,this.renderer.setSize(h,a));var l=e.getZoom(),d=Math.pow(2,l),p=e.getProjection().fromLatLngToPoint(s);this.camera.position.x=p.x,this.camera.position.y=p.y,this.scale=l,this.camera.scale.x=this.width/256/d,this.camera.scale.y=this.height/256/d},this.draw=function(){cancelAnimationFrame(this.animationFrame),this.animationFrame=requestAnimationFrame(this.deferredRender.bind(this))},this.deferredRender=function(){this.update();var t=this.context,e=(this.renderer,this.numMasks>0);e&&(t.colorMask(!1,!1,!1,!1),t.depthMask(!1),t.enable(t.STENCIL_TEST),t.stencilOp(t.REPLACE,t.REPLACE,t.REPLACE),t.stencilFunc(t.ALWAYS,0,4294967295),t.clearStencil(1),this.renderer.render(this.sceneMask,this.camera,null,!0),t.colorMask(!0,!0,!0,!0),t.depthMask(!0),t.stencilFunc(t.EQUAL,0,4294967295),t.stencilOp(t.KEEP,t.KEEP,t.KEEP));for(var i=0;i<this.objectRenderers.length;i++)this.objectRenderers[i].draw();this.renderer.render(this.scene,this.camera,null,!e),e&&t.disable(t.STENCIL_TEST),this.dispatchEvent({type:"render"})}};e.prototype=_.extend(new google.maps.OverlayView,new THREE.EventDispatcher),e.prototype.constructor=e,e.prototype.getMap=function(){return this._map},e.prototype.onAdd=function(){this.getPanes().overlayLayer.appendChild(this.renderer.domElement),this.addEventListeners(),this.dispatchEvent({type:"added_to_dom"})},e.prototype.onRemove=function(){this.renderer.domElement;this.canvas.parentElement.removeChild(this.canvas),this.removeEventListeners(),this.dispatchEvent({type:"removed_from_dom"})},e.prototype.init=function(){return this.pointRenderer=new PointRenderer(this).init(),this.scene.add(this.pointRenderer.sceneObject),this.spriteRenderer=(new SpriteRenderer).init(),this.scene.add(this.spriteRenderer.sceneObject),this.polygonRenderer=(new PolygonRenderer).init(),this.lineRenderer=(new LineRenderer).init(),this.objectRenderers.push(this.pointRenderer),this.objectRenderers.push(this.polygonRenderer),this.objectRenderers.push(this.spriteRenderer),this.objectRenderers.push(this.lineRenderer),this},e.prototype.addEventListeners=function(){this.changeHandler=google.maps.event.addListener(this.map,"bounds_changed",this.draw.bind(this))},e.prototype.removeEventListeners=function(){google.maps.event.removeListener(this.changeHandler),this.changeHandler=null},e.prototype.addObject=function(t){this.scene.add(t)},e.prototype.removeObject=function(t){this.scene.remove(t)},e.prototype.addPoint=function(t){return this.pointRenderer.add(t)},e.prototype.removePoint=function(t){this.pointRenderer.remove(t)},e.prototype.addSprite=function(t){return this.spriteRenderer.add(t)},e.prototype.removeSprite=function(t){this.spriteRenderer.remove(t)},e.prototype.createGeometry=function(t){var e=this.polygonRenderer.create(t);return null!==e&&this.addGeometry(e),e},e.prototype.addGeometry=function(t){this.scene.add(t.shape),this.scene.add(t.outline)},e.prototype.removeGeometry=function(t){this.scene.remove(t.shape),this.scene.remove(t.outline)},e.prototype.destroyGeometry=function(t){delete t.shape,delete t.outline},e.prototype.createLine=function(t){var e=this.lineRenderer.create(t);return null!==e&&this.addLine(e),e},e.prototype.addLine=function(t){this.scene.add(t)},e.removeLine=function(t){this.scene.remove(t)},e.destroyLine=function(t){delete t},e.prototype.createMask=function(t){var e=this.polygonRenderer.create(t);return null!==e&&this.addMask(e),e},e.prototype.addMask=function(t){this.sceneMask.add(t.shape),this.sceneMask.add(t.outline),this.numMasks+=1},e.prototype.removeMask=function(t){this.sceneMask.remove(t.shape),this.sceneMask.remove(t.outline),this.numMasks-=1},e.prototype.destroyMask=function(t){delete t.shape,delete t.outline},window.WebGLView=e}(),function(){var t={};t.get=function(t,e){var i=Q.defer(),s=e.responseType;if("blob"===s)var n=$("<img />").attr("src",t).on("load",function(){i.resolve({data:n[0]})});else $.ajax(t,e).success(function(t,e,s){i.resolve({data:t,status:e,xhr:s})}).error(function(t,e,s){i.reject({xhr:t,status:e,error:s})});return i.promise},window.http=t}(),function(){var t=64,e=function(t){this.webGlView=t,this.views=[]};e.prototype.setMap=function(t){return t?(this.map=t,this.update(),this._addEventListeners()):(this._removeEventListeners(),this.map=t),this},e.prototype.addView=function(e){var i=this.views.indexOf(e);0>i&&this.views.push(e);this.bounds;return e.setClusterPixelSize(t),this},e.prototype.removeView=function(t){var e=this.views.indexOf(t);return e>=0&&this.views.splice(e,1),t.clear(),this},e.prototype._addEventListeners=function(){this.changeListener=google.maps.event.addListener(this.map,"bounds_changed",this.update.bind(this))},e.prototype._removeEventListeners=function(){google.maps.event.removeListener(this.changeListener)},e.prototype.update=function(){},window.ClusterController=e}(),function(){function t(t,i,s){var n=s.fromLatLngToPoint(t),o={x:n.x*Math.pow(2,i),y:n.y*Math.pow(2,i)},r={x:Math.floor(o.x/e),y:Math.floor(o.y/e)};return r}var e=256,i=function(t){this.webGlView=t,this.bounds=new Rectangle(0,0,0,0),this.zoom=0,this.minZoom=0,this.maxZoom=10,this.enabled=!1,this.views=[]};i.prototype.setMap=function(t){return t?(this.map=t,this.update(),this._addEventListeners()):(this._removeEventListeners(),this.map=t),this},i.prototype.addView=function(t){var i=this.views.indexOf(t);0>i&&this.views.push(t);var s=this.bounds;return t.setTileSize(e),t.showTiles(s.ulx,s.uly,s.lrx,s.lry,this.zoom),this},i.prototype.removeView=function(t){var e=this.views.indexOf(t);return e>=0&&this.views.splice(e,1),t.clear(),this},i.prototype._addEventListeners=function(){this.changeListener=google.maps.event.addListener(this.map,"bounds_changed",this.update.bind(this))},i.prototype._removeEventListeners=function(){google.maps.event.removeListener(this.changeListener)},i.prototype.hasChangedZoom=function(t){return this.zoom!=t},i.prototype.hasChangedBounds=function(t){var e=this.bounds;return e.ulx!=t.ulx||e.uly!=t.uly||e.lrx!=t.lrx||e.lry!=t.lry},i.prototype.update=function(){var e=this.map,i=e.getBounds(),s=i.getNorthEast(),n=i.getSouthWest(),o=new google.maps.LatLng(s.lat(),n.lng()),r=new google.maps.LatLng(n.lat(),s.lng()),h=e.getZoom(),a=e.getProjection(),l=t(o,h,a),d=t(r,h,a),p=new Rectangle(l.x,l.y,d.x-l.x,d.y-l.y);h=Math.max(this.minZoom,h),h=Math.min(this.maxZoom,h);var u=this.bounds,c=Math.min(u.ulx,p.ulx),m=Math.min(u.uly,p.uly),v=Math.max(u.lrx,p.lrx)-c,g=Math.max(u.lry,p.lry)-m,y=new Rectangle(c,m,v,g);this.hasChangedZoom(h)&&(this.updateTiles(u,u,new Rectangle(-1,-1,0,0),this.zoom),u=new Rectangle(-1,-1,0,0),y=p),this.hasChangedBounds(p)&&this.updateTiles(y,u,p,h)},i.prototype.updateTiles=function(t,e,i,s){for(var n=this.views,o=0;o<n.length;o++){for(var r=t.ulx;r<=t.lrx;r++)for(var h=t.uly;h<=t.lry;h++)i.containsPoint(r,h)?e.containsPoint(r,h)||n[o].showTile(r,h,s):e.containsPoint(r,h)&&n[o].hideTile(r,h,s);this.webGlView.draw()}this.zoom=s,this.bounds=i},window.TileController=i}(),function(){var t=function(t,e){this.url=t,this.projection=e,this.fileExtension="json",this.responseType="json"};t.prototype.parse=function(t){var e={polygons:[],points:[],lines:[]},i=this,s=function(t){var s=i._parseFeature(t);s.polygons.length>0&&(e.polygons=e.polygons.concat(s.polygons)),s.points.length>0&&(e.points=e.points.concat(s.points)),s.lines.length>0&&(e.lines=e.lines.concat(s.lines))};if(t)if("FeatureCollection"==t.type)for(var n=t.features,o=0;o<n.length;o++)s(n[o]);else"Feature"==t.type&&s(t);return e},t.prototype._parseFeature=function(t){var e=[],i=[],s=[];if("Polygon"==t.geometry.type)for(var n=t.geometry.coordinates,o=0;o<n.length;o++){var r=n[o];e.push(this._parseCoordinates(r))}else if("MultiPolygon"==t.geometry.type)for(var n=t.geometry.coordinates,o=0;o<n.length;o++)for(var h=n[o],a=0;a<h.length;a++){var r=h[a];e.push(this._parseCoordinates(r))}else if("LineString"==t.geometry.type)s.push(this._parseCoordinates(t.geometry.coordinates));else if("MultiLineString"==t.geometry.type)for(var n=t.geometry.coordinates,o=0;o<n.length;o++){var l=n[o];s.push(this._parseCoordinates(l))}else if("Point"==t.geometry.type){var n=t.geometry.coordinates,d=new google.maps.LatLng(n[1],n[0]),p=this.projection.fromLatLngToPoint(d);i.push({latLng:d,point:p})}return{polygons:e,points:i,lines:s}},t.prototype._parseCoordinates=function(t){for(var e=[],s=0;s<t[i].length;s++){var n=new google.maps.LatLng(t[i][s][1],t[i][s][0]),o=this.projection.fromLatLngToPoint(n);e.push([o.x,o.y])}return e},window.GeoJSONDataSource=t}(),function(){var t=function(t){this.url=t,this.fileExtension="png",this.responseType="blob"};t.prototype.parse=function(t){return t},window.ImageDataSource=t}(),function(){var t=function(t,e){this.url=t,this.projection=e,this.fileExtension="",this.responseType="arraybuffer"};t.prototype.parse=function(t){for(var e=this.projection,t=new Uint32Array(response.data),i=[],s=0;s<t.length;s+=4){var n=new google.maps.LatLng(t[s]/1e6,t[s+1]/1e6),o=e.fromLatLngToPoint(n),r=t[s+2],h=t[s+3];i.push({id:h,count:r,latLng:n,point:o})}return i},window.STADataSource=t}(),function(){var t=function(t,e,i){this.dataSource=t,this.$http=e,this.$q=i,this.tiles={}};t.prototype.getTileUrl=function(t,e,i){return this.dataSource.url+"/"+i+"/"+t+"/"+e+"."+this.dataSource.fileExtension},t.prototype.getTile=function(t,e,i){var s=this.$q.defer(),n=this.getTileUrl(t,e,i);if(this.tiles[n])s.resolve({url:n,data:this.tiles[n]});else{var o=this;this.$http.get(n,{responseType:this.dataSource.responseType}).then(function(t){o.tiles[n]=o.dataSource.parse(t.data),s.resolve({url:n,data:o.tiles[n]})},function(t){s.reject(t)})}return s.promise},window.TileProvider=t}(),function(){var t=function(t,e){this.tileProvider=t,this.webGlView=e,this.tiles={}};t.prototype.setTileSize=function(t){this.tileSize=t},t.prototype.showTiles=function(t,e,i,s,n){for(var o=t;i>=o;o++)for(var r=e;s>=r;r++)this.showTile(o,r,n);this.webGlView.draw()},t.prototype.showTile=function(t,e,i){var s=this.tileProvider.getTileUrl(t,e,i);if(this.tiles[s]){if(!this.tiles[s].geometry){var n=Math.pow(2,i),o=this.tileSize/n,r={position:{x:t*o,y:e*o,z:i},width:o,height:o,image:this.tiles[s].data,imageName:s};this.tiles[s].geometry=this.webGlView.addSprite(r),this.webGlView.draw()}}else{var h=this;this.tileProvider.getTile(t,e,i).then(function(n){h.tiles[s]=n;var o=Math.pow(2,i),r=h.tileSize/o,a={position:{x:t*r,y:e*r,z:i},width:r,height:r,image:h.tiles[s].data,imageName:s};h.tiles[s].geometry=h.webGlView.addSprite(a),h.webGlView.draw()},function(t){})}},t.prototype.hideTile=function(t,e,i){var s=this.tileProvider.getTileUrl(t,e,i);this.tiles[s]&&this.tiles[s].geometry&&(this.webGlView.removeSprite(this.tiles[s].geometry),this.tiles[s].geometry=null)},t.prototype.clear=function(){for(var t in this.tiles)this.tiles[t].geometry&&(this.webGlView.removeSprite(this.tiles[t].geometry),this.tiles[t].geometry=null);this.webGlView.draw()},window.ImageTileView=t}(),function(){var t=function(){};window.SiteClusterView=t}(),function(){function t(){return(255&Math.floor(255*Math.random()))<<16|(255&Math.floor(255*Math.random()))<<8|255&Math.floor(255*Math.random())}var e=function(t,e,i,s){this.tileProvider=t,this.webGlView=e,this.iconImage=i,this.tiles={},this.shownTiles={},this.useRandomColors=s};e.prototype.setTileSize=function(t){this.tileSize=t},e.prototype.setTileSize=function(t){this.tileSize=t},e.prototype.showTiles=function(t,e,i,s,n){for(var o=t;i>=o;o++)for(var r=e;s>=r;r++)this.showTile(o,r,n);this.webGlView.draw()},e.prototype.showTile=function(t,e,i){var s=this.tileProvider.getTileUrl(t,e,i);if(!this.shownTiles[s])if(this.shownTiles[s]=!0,this.tiles[s])(this.tiles[s].polygons||this.tiles[s].lines)&&this.tiles[s].polygons&&this.webGlView.addGeometry(this.tiles[s].polygons),this.tiles[s].lines?this.webGlView.addLine(this.tiles[s].lines):this.tiles[s].data&&this.createFeatures(this.tiles[s].data);else{var n=this;this.tileProvider.getTile(t,e,i).then(function(t){n.tiles[s]=t,n.shownTiles[s]&&n.createFeatures(n.tiles[s].data)},function(t){console.log(t)})}},e.prototype.hideTile=function(t,e,i){var s=this.tileProvider.getTileUrl(t,e,i);if(this.shownTiles[s]=!1,this.tiles[s]&&(this.tiles[s].polygons&&(this.webGlView.removeGeometry(this.tiles[s].polygons),delete this.tiles[s].polygons,this.tiles[s].polygons=null),this.tiles[s].lines&&(this.webGlView.removeLine(this.tiles[s].lines),delete this.tiles[s].lines,this.tiles[s].lines=null),this.tiles[s].points)){for(var n=this.tiles[s].points,o=0;o<n.length;o++)this.webGlView.removePoint(n[o]);this.tiles[s].points=null}},e.prototype.clear=function(){for(var t in this.tiles)if(this.tiles[t].polygons&&(this.webGlView.removeGeometry(this.tiles[t].polygons),delete this.tiles[t].polygons,this.tiles[t].polygons=null),this.tiles[t].lines&&(this.webGlView.removeLine(this.tiles[t].lines),delete this.tiles[t].lines,this.tiles[t].lines=null),this.tiles[t].points){for(var e=this.tiles[t].points,i=0;i<e.length;i++)this.webGlView.removePoint(e[i]);this.tiles[t].points=null}this.webGlView.draw()},e.prototype.createFeatures=function(e){var i=!1;if(e.polygons.length>0){var s={};s.features=e.polygons,s.fillColor=this.useRandomColors?t():null,this.tiles[url].polygons=this.webGlView.createGeometry(s),i=!0}if(e.lines.length>0){var n={};n.features=e.lines,n.strokeColor=this.useRandomColors?t():null,this.tiles[url].lines=this.webGlView.createLine(n),i=!0}for(var o=[],r=0;r<e.points.length;r++){var h=e.points[r],a={position:{x:h.x,y:h.y,z:100},color:{r:1,g:1,b:1},image:this.iconImage,imageName:this.iconImage.url};o.push(this.webGlView.addPoint(a))}this.tiles[url].points=o,i&&this.webGlView.draw()},window.VectorTileView=e}();
//# sourceMappingURL=data:application/json;base64,
